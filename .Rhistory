#DS.ASD.sample=DS.ASD.sample %>% filter(is.na(No.case)==F & is.na(No.contr)==F) # filtering variants with no observed alleles
DS.ASD.sample
All.Anno.count=numeric(); DS.ASD.count=numeric()
All.Anno.count[1]=nrow(All.Anno.Data); DS.ASD.count[1]=nrow(DS.ASD.sample)
All.Anno.count[2]=nrow(All.Anno.Data %>% filter(ExacAF<0.001)); DS.ASD.count[2]=nrow(DS.ASD %>% filter(ExacAF<0.001))
All.Anno.count[3]=nrow(All.Anno.Data %>% filter(ExacAF>0.001 & ExacAF<0.01)); DS.ASD.count[3]=nrow(DS.ASD.sample %>% filter(ExacAF>0.001 & ExacAF<0.01))
All.Anno.count[4]=nrow(All.Anno.Data %>% filter(ExacAF>0.01 & ExacAF<0.05)); DS.ASD.count[4]=nrow(DS.ASD.sample %>% filter(ExacAF>0.01 & ExacAF<0.05))
All.Anno.count[5]=nrow(All.Anno.Data %>% filter(ExacAF>0.05))
DS.ASD.count[5]=nrow(DS.ASD.sample %>% filter(ExacAF>0.05))
var.count=tibble(cutoff=rep(c("All", "AF<0.1%", "0.1%<AF<1%", "1%<AF<5%", "AF>5%"),2), group=rep(c("old", "DS-ASD"),each=5), counts=c(All.Anno.count, DS.ASD.count) )
ggplot(data=var.count, aes(x=cutoff, y=counts, fill=group)) +
geom_bar(stat="identity", position=position_dodge())
var.count
DS.ASD.sample
sum(DS.ASD.sample==".")
sum(DS.ASD.sample==".", na.rm=T)
N1=2403; N0=2403
DS.ASD.sample[DS.ASD.sample =="."] <- NA
DS.ASD.sample$ExacAF[is.na(DS.ASD.sample$ExacAF)]=0 # set AF of NA to zero
DS.ASD=DS.ASD.sample[which(DS.ASD.sample$ExacAF<0.05 & DS.ASD.sample$Annotation!="synonymous SNV"),] # use AF cutoff and exclude synonumous SNV
var.data=as_tibble(data.frame(ID=DS.ASD$ID, No.case=DS.ASD$No.case, No.contr=Anno.Data$No.contr))
N1=2403; N0=2403
DS.ASD.sample[DS.ASD.sample =="."] <- NA
DS.ASD.sample$ExacAF[is.na(DS.ASD.sample$ExacAF)]=0 # set AF of NA to zero
DS.ASD=DS.ASD.sample[which(DS.ASD.sample$ExacAF<0.05 & DS.ASD.sample$Annotation!="synonymous SNV"),] # use AF cutoff and exclude synonumous SNV
var.data=as_tibble(data.frame(ID=DS.ASD$ID, No.case=DS.ASD$No.case, No.contr=DS.ASD$No.contr))
LoF.def=c("stopgain", "frameshift substitution", "splicing", "stoploss")
LoF.var=as.character(Anno.Data$ID[which(Anno.Data$Annotation %in% LoF.def==T)])
N1=2403; N0=2403
DS.ASD.sample[DS.ASD.sample =="."] <- NA
DS.ASD.sample$ExacAF[is.na(DS.ASD.sample$ExacAF)]=0 # set AF of NA to zero
DS.ASD=DS.ASD.sample[which(DS.ASD.sample$ExacAF<0.05 & DS.ASD.sample$Annotation!="synonymous SNV"),] # use AF cutoff and exclude synonumous SNV
var.data=as_tibble(data.frame(ID=DS.ASD$ID, No.case=DS.ASD$No.case, No.contr=DS.ASD$No.contr))
LoF.def=c("stopgain", "frameshift substitution", "splicing", "stoploss")
LoF.var=as.character(DS.ASD$ID[which(DS.ASD$Annotation %in% LoF.def==T)])
getwd()
path
GeneDB=src_sqlite("C:\\Shengtong\\Research\\rare-var\\gene.list.db", create=F)
GeneDB=src_sqlite("C:\\Shengtong\\Research\\rare-var\\gene.list.db", create=F)
gene_cate1=data.frame(collect(tbl(GeneDB, "SFARI_HighConf")))
gene_cate2=data.frame(collect(tbl(GeneDB, "SFARI_StrongCand")))
gene_cate3=data.frame(collect(tbl(GeneDB, "SFARI_cate3_gene")))
gene_cate4=data.frame(collect(tbl(GeneDB, "SFARI_cate4_gene")))
gene_cate5=data.frame(collect(tbl(GeneDB, "SFARI_cate5_gene")))
gene_cate6=data.frame(collect(tbl(GeneDB, "SFARI_cate6_gene")))
gene_cateS=data.frame(collect(tbl(GeneDB, "SFARI_cateS_gene")))
IDGene=data.frame(collect(tbl(GeneDB, "Pinto14AJHG_IDgene")))
TADAGene=data.frame(collect(tbl(GeneDB, "TADAGenelist")))
Qlessthan5percentgene=TADAGene$TadaName[TADAGene$qvalue.combined<0.05]
Qlessthan20percentgene=TADAGene$TadaName[TADAGene$qvalue.combined<0.2]
Qlessthan30percentgene=TADAGene$TadaName[TADAGene$qvalue.combined<0.3]
Qlessthan40percentgene=TADAGene$TadaName[TADAGene$qvalue.combined<0.4]
Qlessthan50percentgene=TADAGene$TadaName[TADAGene$qvalue.combined<0.5]
Qlargerthan90percentgene=TADAGene$TadaName[TADAGene$qvalue.combined>0.9]
purcell.genelist=data.frame(collect(tbl(GeneDB, "Purcell2014_genelist"))) ## PSD gene, SCZdenovo gene
ASD.gene=data.frame(collect(tbl(GeneDB, "AutismKB_gene")))
constraint.gene=data.frame(collect(tbl(GeneDB, "Samocha_2014NG_constraintgene")))$gene
RVIS.Allgene=data.frame(collect(tbl(GeneDB, "RVIS_gene")))
RVIS.gene=RVIS.Allgene$GeneID[RVIS.Allgene$RVIS.percentile<5] # top 5% gene
haploinsuff.gene=data.frame(collect(tbl(GeneDB, "Petrovski_plosgen_haploinsuff_gene")))
gene.set=c("ID gene","High conf", "Mod conf", "PSD", "FMRP", "AutismKB", "constraint gene", "RVIS", "Haploinsuff gene", "SCZ gene", "Olfac.gene")
gene.fea=c("cate1", "cate2", "cate3", "cate4", "cate5", "cate6", "cateS", "TADAq<5%", "TADAq<20%", "TADAq<30%", "TADAq<40%", "TADAq<50%", "TADAq>90%", gene.set); max.gene=length(gene.fea)
gene.summy=matrix(nrow=max.gene+1, ncol=4)
gene.evid=list(); var.index=1
gene.evid[[1]]=as.character(Anno.Data$ID[which(Anno.Data$Gene %in% gene_cate1$GeneID )])
N1=2403; N0=2403
DS.ASD.sample[DS.ASD.sample =="."] <- NA
DS.ASD.sample$ExacAF[is.na(DS.ASD.sample$ExacAF)]=0 # set AF of NA to zero
Anno.Data=DS.ASD.sample[which(DS.ASD.sample$ExacAF<0.05 & DS.ASD.sample$Annotation!="synonymous SNV"),] # use AF cutoff and exclude synonumous SNV
var.data=as_tibble(data.frame(ID=Anno.Data$ID, No.case=Anno.Data$No.case, No.contr=Anno.Data$No.contr))
LoF.def=c("stopgain", "frameshift substitution", "splicing", "stoploss")
LoF.var=as.character(Anno.Data$ID[which(Anno.Data$Annotation %in% LoF.def==T)])
GeneDB=src_sqlite("C:\\Shengtong\\Research\\rare-var\\gene.list.db", create=F)
gene_cate1=data.frame(collect(tbl(GeneDB, "SFARI_HighConf")))
gene_cate2=data.frame(collect(tbl(GeneDB, "SFARI_StrongCand")))
gene_cate3=data.frame(collect(tbl(GeneDB, "SFARI_cate3_gene")))
gene_cate4=data.frame(collect(tbl(GeneDB, "SFARI_cate4_gene")))
gene_cate5=data.frame(collect(tbl(GeneDB, "SFARI_cate5_gene")))
gene_cate6=data.frame(collect(tbl(GeneDB, "SFARI_cate6_gene")))
gene_cateS=data.frame(collect(tbl(GeneDB, "SFARI_cateS_gene")))
IDGene=data.frame(collect(tbl(GeneDB, "Pinto14AJHG_IDgene")))
TADAGene=data.frame(collect(tbl(GeneDB, "TADAGenelist")))
Qlessthan5percentgene=TADAGene$TadaName[TADAGene$qvalue.combined<0.05]
Qlessthan20percentgene=TADAGene$TadaName[TADAGene$qvalue.combined<0.2]
Qlessthan30percentgene=TADAGene$TadaName[TADAGene$qvalue.combined<0.3]
Qlessthan40percentgene=TADAGene$TadaName[TADAGene$qvalue.combined<0.4]
Qlessthan50percentgene=TADAGene$TadaName[TADAGene$qvalue.combined<0.5]
Qlargerthan90percentgene=TADAGene$TadaName[TADAGene$qvalue.combined>0.9]
purcell.genelist=data.frame(collect(tbl(GeneDB, "Purcell2014_genelist"))) ## PSD gene, SCZdenovo gene
ASD.gene=data.frame(collect(tbl(GeneDB, "AutismKB_gene")))
constraint.gene=data.frame(collect(tbl(GeneDB, "Samocha_2014NG_constraintgene")))$gene
RVIS.Allgene=data.frame(collect(tbl(GeneDB, "RVIS_gene")))
RVIS.gene=RVIS.Allgene$GeneID[RVIS.Allgene$RVIS.percentile<5] # top 5% gene
haploinsuff.gene=data.frame(collect(tbl(GeneDB, "Petrovski_plosgen_haploinsuff_gene")))
gene.set=c("ID gene","High conf", "Mod conf", "PSD", "FMRP", "AutismKB", "constraint gene", "RVIS", "Haploinsuff gene", "SCZ gene", "Olfac.gene")
gene.fea=c("cate1", "cate2", "cate3", "cate4", "cate5", "cate6", "cateS", "TADAq<5%", "TADAq<20%", "TADAq<30%", "TADAq<40%", "TADAq<50%", "TADAq>90%", gene.set); max.gene=length(gene.fea)
gene.summy=matrix(nrow=max.gene+1, ncol=4)
gene.evid=list(); var.index=1
gene.evid[[1]]=as.character(Anno.Data$ID[which(Anno.Data$Gene %in% gene_cate1$GeneID )])
gene.evid[[2]]=as.character(Anno.Data$ID[which(Anno.Data$Gene %in% gene_cate2$GeneID )])
gene.evid[[3]]=as.character(Anno.Data$ID[which(Anno.Data$Gene %in% gene_cate3$GeneID )])
gene.evid[[4]]=as.character(Anno.Data$ID[which(Anno.Data$Gene %in% gene_cate4$GeneID )])
gene.evid[[5]]=as.character(Anno.Data$ID[which(Anno.Data$Gene %in% gene_cate5$GeneID )])
gene.evid[[6]]=as.character(Anno.Data$ID[which(Anno.Data$Gene %in% gene_cate6$GeneID )])
gene.evid[[7]]=as.character(Anno.Data$ID[which(Anno.Data$Gene %in% gene_cateS$GeneID )])
gene.evid[[8]]=as.character(Anno.Data$ID[which(Anno.Data$Gene %in% Qlessthan5percentgene )])
gene.evid[[9]]=as.character(Anno.Data$ID[which(Anno.Data$Gene %in% Qlessthan20percentgene )])
gene.evid[[10]]=as.character(Anno.Data$ID[which(Anno.Data$Gene %in% Qlessthan30percentgene )])
gene.evid[[11]]=as.character(Anno.Data$ID[which(Anno.Data$Gene %in% Qlessthan40percentgene)])
gene.evid[[12]]=as.character(Anno.Data$ID[which(Anno.Data$Gene %in% Qlessthan50percentgene )])
gene.evid[[13]]=as.character(Anno.Data$ID[which(Anno.Data$Gene %in% Qlargerthan90percentgene )])
gene.evid[[14]]=as.character(Anno.Data$ID[which(Anno.Data$Gene %in% IDGene$GeneID )])
high.conf=union(union(gene_cate1$GeneID, gene_cate2$GeneID),Qlessthan5percentgene)
mod.conf=setdiff(union(union(gene_cate3$GeneID, gene_cateS$GeneID), Qlessthan30percentgene),Qlessthan5percentgene)
gene.evid[[15]]=as.character(Anno.Data$ID[which(Anno.Data$Gene %in% high.conf)])
gene.evid[[16]]=as.character(Anno.Data$ID[which(Anno.Data$Gene %in% mod.conf )])
psd.gene=purcell.genelist$Gene_symbol[purcell.genelist$PSD=="Y"]
FMRP.gene=purcell.genelist$Gene_symbol[purcell.genelist$FMRP.target=="Y"]
gene.evid[[17]]=as.character(Anno.Data$ID[which(Anno.Data$Gene %in% psd.gene )])
gene.evid[[18]]=as.character(Anno.Data$ID[which(Anno.Data$Gene %in% FMRP.gene )])
gene.evid[[19]]=as.character(Anno.Data$ID[which(Anno.Data$Gene %in% ASD.gene$GeneID )])
gene.evid[[20]]=as.character(Anno.Data$ID[which(Anno.Data$Gene %in% constraint.gene )])
gene.evid[[21]]=as.character(Anno.Data$ID[which(Anno.Data$Gene %in% RVIS.gene )])
gene.evid[[22]]=as.character(Anno.Data$ID[which(Anno.Data$Gene %in% haploinsuff.gene$GeneID )])
gene.evid[[23]]=as.character(Anno.Data$ID[which(Anno.Data$Gene %in% purcell.genelist$Gene_symbol )])
olfac.gene=data.frame(collect(tbl(GeneDB, "Olfac_gene")))
gene.evid[[24]]=as.character(Anno.Data$ID[which(Anno.Data$Gene %in% olfac.gene$GeneID )])
#sczgene=as.character(read.table("D:\\ResearchWork\\StatisticalGenetics\\NumericAnalysis\\RealData\\SCZData\\GeneList\\SCZ.67gene.q0.3.txt", header=T)[[1]])
#gene.evid[[25]]=as.character(Anno.Data$ID[which(Anno.Data$Gene %in% sczgene )])
colnames(gene.summy)=c("OR", "p.value", "rate.ca", "rate.co")
rownames(gene.summy)=c(gene.fea, "67SCZriskgene")
LoF.summy=gene.summy
colnames(LoF.summy)=c("OR", "p.value", "No.ca", "No.co")
for (gene in 1:(max.gene))
{
cat(gene, "is running", "\n")
pois.test=test.func(gene.evid[[gene]], var.data, N1, N0)
gene.summy[gene,]=c(pois.test$odds.ratio, pois.test$p.value, pois.test$rate.case, pois.test$rate.contr)
LoF.test=test.func(intersect(gene.evid[[gene]], LoF.var), var.data, N1, N0)
LoF.summy[gene,]=c(LoF.test$odds.ratio, LoF.test$p.value, LoF.test$rate.case*N1, LoF.test$rate.contr*N0)
}
test.func=function(evid, Data, N1, N0) # given evid, and sample size, perform the burden analysis
{
evid.data=Data[Data$ID %in% evid,]
count=c(sum(evid.data$No.case), sum(evid.data$No.contr))
Time=c(N1, N0)
pois.test=poisson.test(count, Time, r=1, alternative="greater")
return(result=list(odds.ratio=pois.test$estimate, p.value=pois.test$p.value, rate.case=count[1]/N1, rate.contr=count[2]/N0))
}
for (gene in 1:(max.gene))
{
cat(gene, "is running", "\n")
pois.test=test.func(gene.evid[[gene]], var.data, N1, N0)
gene.summy[gene,]=c(pois.test$odds.ratio, pois.test$p.value, pois.test$rate.case, pois.test$rate.contr)
LoF.test=test.func(intersect(gene.evid[[gene]], LoF.var), var.data, N1, N0)
LoF.summy[gene,]=c(LoF.test$odds.ratio, LoF.test$p.value, LoF.test$rate.case*N1, LoF.test$rate.contr*N0)
}
kable(gene.summy, caption="Burden analysis of gene set", "html")%>%
kable_styling() %>%
scroll_box(height = "200px")
library(kableExtra)
kable(gene.summy, caption="Burden analysis of gene set", "html")%>%
kable_styling() %>%
scroll_box(height = "200px")
kable(LoF.summy, caption="Burden analysis of LoF in different gene sets", "html")%>%
kable_styling() %>%
scroll_box(height = "200px")
Gene=row.names(gene.summy)[1:22]
OR=gene.summy[1:22,1]; pval=gene.summy[1:22,2]
result.summary=tibble(Gene=Gene, OR=OR, pval=pval)
# pdf("../../Figure/burden_geneset.pdf")
ggplot(result.summary, aes(x=Gene, y=OR, fill=Gene))+
geom_bar(stat="identity")+
ylab("")+xlab("Gene")+ ggtitle("Burden analysis for gene sets")+
geom_point(mapping=aes(x=Gene, y=-log(pval, base=10), size=-log(pval, base=10), fill=Gene), alpha=0.8)+
coord_flip()+
scale_color_viridis(discrete=T)+
geom_hline(yintercept=1,linetype="dashed")+
geom_hline(yintercept=-log(0.05, base=10), linetype="dashed", color = "red")+
#theme(legend.position = "none")+  # no legend at all
guides(fill = FALSE)+
theme(plot.title = element_text(hjust = 0.5, size=10)) #center the title
library(viridis)
library(ggsignif)
library(ggpubr)
Gene=row.names(gene.summy)[1:22]
OR=gene.summy[1:22,1]; pval=gene.summy[1:22,2]
result.summary=tibble(Gene=Gene, OR=OR, pval=pval)
# pdf("../../Figure/burden_geneset.pdf")
ggplot(result.summary, aes(x=Gene, y=OR, fill=Gene))+
geom_bar(stat="identity")+
ylab("")+xlab("Gene")+ ggtitle("Burden analysis for gene sets")+
geom_point(mapping=aes(x=Gene, y=-log(pval, base=10), size=-log(pval, base=10), fill=Gene), alpha=0.8)+
coord_flip()+
scale_color_viridis(discrete=T)+
geom_hline(yintercept=1,linetype="dashed")+
geom_hline(yintercept=-log(0.05, base=10), linetype="dashed", color = "red")+
#theme(legend.position = "none")+  # no legend at all
guides(fill = FALSE)+
theme(plot.title = element_text(hjust = 0.5, size=10)) #center the title
#dev.off()
gene.set=as.character(read.csv("C:/Shengtong/Research/rare-var/GeneSet/Samocha_2014NG/Samocha_2014NG_contraintgene.csv", header=T)$gene)
cand.data=as_tibble(Anno.Data[which(Anno.Data$Gene %in% gene.set),])
par.evid=list()
par.evid[[1]]=cand.data %>% filter(Annotation%in%LoF.def)%>% filter(between(ExacAF, 0.01, 0.05))
par.evid[[2]]=cand.data %>% filter(Annotation%in%LoF.def) %>% filter(between(ExacAF, 0, 0.01))
par.evid[[3]]=cand.data %>% filter(Annotation %in% LoF.def==F) %>% filter(between(as.numeric(as.character(Polyphen2.HDIV.score)), 0.957, 1)) %>% filter(between(ExacAF, 0.01, 0.05))
cand.data
cand.data=cand.data %>% rename(Polyphen2.HDIV.score=Polyphen2.HDIV)
cand.data
unique.gene=unique(cand.data$Gene)
var.count=numeric()
for (i in 1:length(unique.gene))
{
single.gene=cand.data[which(cand.data$Gene==unique.gene[i]),]
var.count[i]=sum(single.gene$No.case)+sum(single.gene$No.contr)
}
gene.var.count=data.frame(Gene=unique.gene, var.count=var.count)
ggplot(gene.var.count, aes(x=var.count))+
geom_histogram()+
geom_vline(aes(xintercept=mean(var.count)),
color="blue", linetype="dashed", size=1)+
xlab("#.variant")+
ylab("#.gene")+
ggtitle("Histogram of variants in top constraint genes")+
theme(plot.title = element_text(hjust = 0.5, size=10)) #center the title
colnames(burden.summy)=c("OR", "p.value", "No.ca", "No.co")
gene.set=as.character(read.csv("C:/Shengtong/Research/rare-var/GeneSet/Samocha_2014NG/Samocha_2014NG_contraintgene.csv", header=T)$gene)
cand.data=as_tibble(Anno.Data[which(Anno.Data$Gene %in% gene.set),])
cand.data=cand.data %>% rename(Polyphen2.HDIV.score=Polyphen2.HDIV)
par.evid=list()
par.evid[[1]]=cand.data %>% filter(Annotation%in%LoF.def)%>% filter(between(ExacAF, 0.01, 0.05))
par.evid[[2]]=cand.data %>% filter(Annotation%in%LoF.def) %>% filter(between(ExacAF, 0, 0.01))
par.evid[[3]]=cand.data %>% filter(Annotation %in% LoF.def==F) %>% filter(between(as.numeric(as.character(Polyphen2.HDIV.score)), 0.957, 1)) %>% filter(between(ExacAF, 0.01, 0.05))
par.evid[[4]]=cand.data %>% filter(Annotation %in% LoF.def==F) %>% filter(between(as.numeric(as.character(Polyphen2.HDIV.score)), 0.957, 1)) %>% filter(between(ExacAF, 0.001, 0.01))
par.evid[[5]]=cand.data %>% filter(Annotation %in% LoF.def==F) %>% filter(between(as.numeric(as.character(Polyphen2.HDIV.score)), 0.957, 1)) %>% filter(between(ExacAF, 0, 0.001))
par.evid[[6]]=cand.data %>% filter(Annotation %in% LoF.def==F) %>% filter(between(as.numeric(as.character(Polyphen2.HDIV.score)), 0, 0.957)) %>% filter(between(ExacAF, 0.01, 0.05))
par.evid[[7]]=cand.data %>% filter(Annotation %in% LoF.def==F) %>% filter(between(as.numeric(as.character(Polyphen2.HDIV.score)), 0, 0.957)) %>% filter(between(ExacAF, 0.001, 0.01))
par.evid[[8]]=cand.data %>% filter(Annotation %in% LoF.def==F) %>% filter(between(as.numeric(as.character(Polyphen2.HDIV.score)), 0, 0.957)) %>% filter(between(ExacAF, 0, 0.001))
burden.summy=matrix(nrow=length(par.evid), ncol=4)
for (i in 1:length(par.evid))
{
cat(i, "is running", "\n")
pois.test=test.func(par.evid[[i]]$ID, var.data, N1, N0)
burden.summy[i,]=c(pois.test$odds.ratio, pois.test$p.value, pois.test$rate.case*N1, pois.test$rate.contr*N0)
}
unique.gene=unique(cand.data$Gene)
var.count=numeric()
for (i in 1:length(unique.gene))
{
single.gene=cand.data[which(cand.data$Gene==unique.gene[i]),]
var.count[i]=sum(single.gene$No.case)+sum(single.gene$No.contr)
}
gene.var.count=data.frame(Gene=unique.gene, var.count=var.count)
ggplot(gene.var.count, aes(x=var.count))+
geom_histogram()+
geom_vline(aes(xintercept=mean(var.count)),
color="blue", linetype="dashed", size=1)+
xlab("#.variant")+
ylab("#.gene")+
ggtitle("Histogram of variants in top constraint genes")+
theme(plot.title = element_text(hjust = 0.5, size=10)) #center the title
colnames(burden.summy)=c("OR", "p.value", "No.ca", "No.co")
kable(burden.summy, caption="The burden of eight categories", "html")%>%
kable_styling() %>%
scroll_box(height = "200px")
Cate=c("1", "2", "3", "4", "5", "6", "7", "8")
OR=burden.summy[,1]; pval=burden.summy[,2]
result.summary=tibble(Cate=Cate, OR=OR, pval=pval)
result.summary$Cate=result.summary$Cate %>% recode("1"="LoF; 1%<AF<5%", "2"="LoF; AF<1%", "3" = "Damaging; 1%<AF<5%","4"= "Damaging; 0.1%<FA<1%", "5" ="Damaging; AF<0.1%", "6" ="Non-damaging; 1%<AF<5%", "7" ="Non-damaging; 0.1%<AF<1%", "8" ="Non-damaging; AF<0.1%")
#pdf("C:\\Users\\han24\\OneDrive - UWM\\rare-var\\Figure\\Supp\\Fig-burden_variant_group_of_constgene.pdf")
ggplot(result.summary, aes(x=Cate, y=OR, fill=Cate))+
geom_bar(stat="identity")+
ylab("")+xlab("")+ ggtitle("")+
geom_point(aes(x=Cate, y=-log(pval, base=10), size=-log(pval, base=10)))+
coord_flip()+
geom_hline(yintercept=1,linetype="dashed")+
geom_hline(yintercept=-log(0.05, base=10), linetype="dashed", color = "red")+
#scale_color_viridis(discrete=T)+
guides(fill = FALSE)+
theme(plot.title = element_text(hjust = 0.5, size=10))+ #center the title
theme(axis.text.y = element_text(angle = 0, hjust = 1,size=7))+
labs(size=expression(paste("-log"[10], "(p value)")))+ # the argument in labs could be size, color, fill depends on which character the legend demonstrate!!!!!!!!
theme(legend.text = element_text(size = 7))+ # change legend text size
theme(legend.title=element_text(size=10))#+
#theme(legend.position="bottom")
#dev.off()
cand.data
right.partition
eight.partition=function(cand.data) # given gene data and annotations, do variant partitions
{
par.evid=list()
LoF.def=c("stopgain", "frameshift substitution", "splicing", "stoploss")
par.evid[[1]]=which(cand.data$Annotation %in% LoF.def==T & cand.data$ExacAF<0.05 & cand.data$ExacAF>=0.01 )
par.evid[[2]]=which(cand.data$Annotation %in% LoF.def==T &  cand.data$ExacAF<0.01)
par.evid[[3]]=which(cand.data$Annotation %in% LoF.def==F & as.numeric(as.character(cand.data$Polyphen2.HDIV.score))>=0.957 & cand.data$ExacAF>=0.01 & cand.data$ExacAF<0.05)
par.evid[[4]]=which(cand.data$Annotation %in% LoF.def==F & as.numeric(as.character(cand.data$Polyphen2.HDIV.score))>=0.957 & cand.data$ExacAF>=0.001 & cand.data$ExacAF<0.01)
par.evid[[5]]=which(cand.data$Annotation %in% LoF.def==F & as.numeric(as.character(cand.data$Polyphen2.HDIV.score))>=0.957 &  cand.data$ExacAF<0.001)
par.evid[[6]]=which(cand.data$Annotation %in% LoF.def==F & as.numeric(as.character(cand.data$Polyphen2.HDIV.score))<0.957 & cand.data$ExacAF>=0.01 & cand.data$ExacAF<0.05)
par.evid[[7]]=which(cand.data$Annotation %in% LoF.def==F & as.numeric(as.character(cand.data$Polyphen2.HDIV.score))<0.957 & cand.data$ExacAF>=0.001 & cand.data$ExacAF<0.01)
par.evid[[8]]=which(cand.data$Annotation %in% LoF.def==F & as.numeric(as.character(cand.data$Polyphen2.HDIV.score))<0.957 & cand.data$ExacAF<0.001)
group.index=rep(NA, nrow(cand.data))
for (i in 1:length(par.evid))
group.index[par.evid[[i]]]=i
gene.data=data.frame(ID=cand.data$ID, Gene=cand.data$Gene, No.case=cand.data$No.case, No.contr=cand.data$No.contr, group.index=group.index)
gene.data=gene.data[complete.cases(gene.data),]
return(gene.data)
}
eight.partition()
eight.partition
gene.set
length(unqie(gene.set))
length(unique(gene.set))
library("devtools")
install_github('xinhe-lab/mirage')
install_github('xinhe-lab/mirage')
library("devtools")
install_github('xinhe-lab/mirage')
library(mirage)
mirage
gene.data=eight.partition(cand.data)
gene.data
head(gene.data)
ds.asd.result=mirage(gene.data)
ds.asd.result=mirage(gene.data, n1=2403, n0=2403)
ds.asd.result=mirage(gene.data, n1=2403, n2=2403)
ds.asd.result=mirage(gene.data, n1=2403, n2=2403)
library("devtools")
install_github('xinhe-lab/mirage')
install.packages("Rtools")
library(Rtools)
mirage
mirage_vs
ds.asd.result=mirage(gene.data, n1=2403, n2=2403)
multi.group.func=function(new.data, N1, N0, gamma.mean, sigma, delta, beta.init, num.group) # new.data has one column specifying its group index
{
########################
max.iter=1e4
stop.cond=0; iter=1  # parameter settings
thrshd=1e-5
beta.k=matrix(nrow=max.iter, ncol=num.group)
beta.k[1,]=beta.init
full.info.genevar=list()
gene.list=new.data$Gene; unique.gene=unique(gene.list) # find the gene list
num.gene=length(unique.gene)
BF.gene=matrix(nrow=max.iter, ncol=num.gene)
LoF.BF.gene=matrix(nrow=max.iter, ncol=num.gene)
nonLoF.BF.gene=matrix(nrow=max.iter, ncol=num.gene)
delta.est=numeric(); delta.est[1]=delta
########################
# calculate the Bayes factor for variant (i,j) and gene i as initials.
for (i in 1:num.gene)
{
cat(i, "th gene of ", "\t", num.gene, "\t", "is running", "\n")
var.index.list=which(gene.list==unique.gene[i])
indi.gene=new.data[var.index.list,]
bb=1; var.BF=numeric()
bb.LoF=1; bb.nonLoF=1
if (length(var.index.list)>0) # calculate Bayes factor for variant (i,j)
for (j in 1:length(var.index.list))
{
if (new.data$group.index[var.index.list[j]]<=5)
var.BF[j]=BF.var.inte(new.data$No.case[var.index.list[j]], new.data$No.contr[var.index.list[j]], bar.gamma=6, sig=sigma, N1, N0)
if (new.data$group.index[var.index.list[j]]>5)
var.BF[j]=BF.var.inte(new.data$No.case[var.index.list[j]], new.data$No.contr[var.index.list[j]], bar.gamma=gamma.mean, sig=sigma, N1, N0)
bb=bb*((1-beta.k[1, new.data$group.index[var.index.list[j]]])+beta.k[1, new.data$group.index[var.index.list[j]]]*var.BF[j])
################## split BF of LoF  and non LoF
if (new.data$group.index[var.index.list[j]]<=2)
bb.LoF=bb.LoF*((1-beta.k[1, new.data$group.index[var.index.list[j]]])+beta.k[1, new.data$group.index[var.index.list[j]]]*var.BF[j])
if (new.data$group.index[var.index.list[j]]>2)
bb.nonLoF=bb.nonLoF*((1-beta.k[1, new.data$group.index[var.index.list[j]]])+beta.k[1, new.data$group.index[var.index.list[j]]]*var.BF[j])
}
full.info.genevar[[i]]=cbind(indi.gene, var.BF)
BF.gene[1, i]=bb
LoF.BF.gene[1,i]=bb.LoF
nonLoF.BF.gene[1,i]=bb.nonLoF
}
########################## EM algorithm
########################
while (stop.cond==0)
{
iter=iter+1
############## EM algorithm: E step
EUiZij=list() # expectation for variant (i,j), every gene may have varying number of variant
EUi=numeric() # expectation for gene i.
total.Zij=matrix(nrow=num.gene, ncol=num.group); total.Ui=matrix(nrow=num.gene, ncol=num.group)  # used to estimate beta
for (i in 1:num.gene)
{
info.single.gene=full.info.genevar[[i]] # this is a small matrix for that single gene. each row is one variant
bb=1; bb.LoF=1; bb.nonLoF=1
UiZij=numeric()
if (nrow(info.single.gene)>0)
for (j in 1:nrow(info.single.gene))
{
numer=info.single.gene$var.BF[j]*beta.k[(iter-1), info.single.gene$group.index[j]]*delta.est[iter-1]
denom=(delta.est[iter-1]+(1-delta.est[iter-1])/BF.gene[(iter-1),i])*(beta.k[(iter-1), info.single.gene$group.index[j]]*info.single.gene$var.BF[j]
+(1-beta.k[(iter-1), info.single.gene$group.index[j]]))
UiZij[j]=numer/denom
bb=bb*((1-beta.k[(iter-1), info.single.gene$group.index[j]])+beta.k[(iter-1), info.single.gene$group.index[j]]*info.single.gene$var.BF[j])
########################### split into LoF and non-LoF two parts
if (info.single.gene$group.index[j]<=2)
bb.LoF=bb.LoF*((1-beta.k[(iter-1), info.single.gene$group.index[j]])+beta.k[(iter-1), info.single.gene$group.index[j]]*info.single.gene$var.BF[j])
if (info.single.gene$group.index[j]>2)
bb.nonLoF=bb.nonLoF*((1-beta.k[(iter-1), info.single.gene$group.index[j]])+beta.k[(iter-1), info.single.gene$group.index[j]]*info.single.gene$var.BF[j])
}
EUiZij[[i]]=UiZij
BF.gene[iter,i]=bb
LoF.BF.gene[iter,i]=bb.LoF
nonLoF.BF.gene[iter,i]=bb.nonLoF
EUi[i]=delta.est[iter-1]*bb/(delta.est[iter-1]*bb+1-delta.est[iter-1])
######################
# Note here each gene may have multiple annotation groups
tt=EUiZij[[i]]
tt[is.na(tt)]=0
for (g in 1:num.group)
{
total.Zij[i, g]=sum(tt[which(info.single.gene$group.index==g)])
total.Ui[i, g]=sum(sum(tt[which(info.single.gene$group.index==g)]>0)*EUi[i])
}
}  # end of i
############## EM algorithm: M step
delta.est[iter]=sum(EUi)/num.gene
#  delta.est[iter]=delta
for (g in 1:num.group)
{
if (sum(total.Ui[,g])!=0)
beta.k[iter, g]=sum(total.Zij[,g])/sum(total.Ui[,g])
if (sum(total.Ui[,g])==0)
beta.k[iter, g]=0
}
################
if (num.group>1)
diff=sum(abs(beta.k[iter,]-beta.k[(iter-1),]))
if (diff<thrshd || iter>(max.iter-1))
stop.cond=1
#   cat(iter, "th iteration is running", "\n")
} # end of iter
##############################
if (iter<max.iter)
{
if (num.group>1)
beta.k=beta.k[complete.cases(beta.k),]
if (num.group==1)
beta.k=beta.k[complete.cases(beta.k)]
}
################## calculate the likelihood ratio test statistics and p value
# beta.k[(iter-1), -7]=0
lkhd=rep(1,num.gene); total.lkhd=0
teststat=numeric(); pvalue=numeric()
for (i in 1:num.gene)
{
#    i=33
data=full.info.genevar[[i]]
if (nrow(data)>0)
for (j in 1:nrow(data))
lkhd[i]=lkhd[i]*((1-beta.k[(iter-1), data$group.index[j]])+beta.k[(iter-1), data$group.index[j]]*data$var.BF[j])
teststat[i]=2*log((1-delta.est[iter-1])+delta.est[iter-1]*lkhd[i]); # this is the test statistics of one gene
total.lkhd=total.lkhd+log((1-delta.est[iter-1])+delta.est[iter-1]*lkhd[i])
pvalue[i]=pchisq(teststat[i], 2, lower.tail=F)
} # end of i
teststat[num.gene+1]=2*total.lkhd
pvalue[num.gene+1]=pchisq(teststat[num.gene+1], 2, lower.tail=F)
##################
cate.lkhd=rep(1,num.group); cate.stat=numeric()
cate.pvalue=numeric(num.group); sum.lkhd=0
for (g in 1:num.group)
{ # g=2
total.lkhd=0; lkhd.gene=rep(1, num.gene)
for (i in 1:num.gene)
{
data=full.info.genevar[[i]]
if (nrow(data)>0)
for (j in 1:nrow(data))
if (data$group.index[j]==g)
{
lkhd.gene[i]=lkhd.gene[i]*((1-beta.k[(iter-1), g])+beta.k[(iter-1), g]*data$var.BF[j])
cate.lkhd[g]=cate.lkhd[g]*((1-beta.k[(iter-1), g])+beta.k[(iter-1), g]*data$var.BF[j])
}
total.lkhd=total.lkhd+log((1-delta.est[iter-1])+delta.est[iter-1]*lkhd.gene[i])
} # end of i
cate.stat[g]=2*total.lkhd
cate.pvalue[g]=pchisq(2*total.lkhd, 1, lower.tail=F)
} # end of g
sum.lkhd=sum(cate.stat)
##############################################
return(result=list(delta.est=delta.est[iter-1], delta.pvalue=pvalue[length(pvalue)], beta.est=beta.k[(iter-1),], beta.stat=cate.stat, beta.pvalue=cate.pvalue, BF.gene=data.frame(Gene=unique.gene, BF=BF.gene[(iter-1),], LoF.BF=LoF.BF.gene[(iter-1),], nonLoF.BF=nonLoF.BF.gene[(iter-1),]), full.info=full.info.genevar, Eui=EUi))
}
mirage
install.packages("Rtools")
library(mirage)
gene.data=eight.partition(cand.data)
ds.asd.result=mirage(gene.data, n1=2403, n2=2403)
.rs.restartR()
library("devtools")
install.packages("Rtools")
install_github('xinhe-lab/mirage')
library(mirage)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
install.packages("tidyverse")
setwd("C:\\Shengtong\\Research\\rare-var\\TestMIRAGEPackage\\mirage\\")
devtools::document()
pkgdown::build_site()
install.packages("roxygen2")
install.packages("roxygen2")
library(roxygen2)
devtools::document()
install.packages("roxygen2")
install.packages("roxygen2")
library(roxygen2)
