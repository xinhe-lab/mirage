ylab = "Survival Probability",
break.time.by = 365       # tick every 365 days
)
start_code=3120
survival_results=qread(paste(path, "survival_results_for_code", start_code, ".qs", sep=""))
# Assuming your data frame is named survival_results
survival_results_clean <- survival_results[!grepl("^9999", survival_results$End_Date), ]
table(survival_results_clean$provider_specialty)
library(survival)
library(survminer)
# Create the survival object
surv_obj <- Surv(time = survival_results_clean$Survival_Time_Days,
event = survival_results_clean$Event_Observed)
# Fit the Kaplan-Meier model
km_fit <- survfit(surv_obj ~ 1, data = survival_results_clean)
# Plot the KM curve: red curve, gray confidence interval
ggsurvplot(km_fit,
data = survival_results_clean,
risk.table = T,
conf.int = TRUE,
# conf.int.fill = "gray",       # Set confidence band to gray
censor.shape = NA,      # remove vertical censoring marks
xlab = "Time (days)",
ylab = "Survival probability",
title = "Kaplan-Meier Curve for Tooth Survival",
palette = "red", # Set curve color to red
break.time.by = 365       # tick every 365 days
)
fit <- survfit(Surv(Survival_Time_Days, Event_Observed) ~ provider_specialty, data = survival_results_clean)
# Extract labels in the correct order
labels <- sub(".*=", "", names(fit$strata))
ggsurvplot(fit,
data = survival_results_clean,
pval = TRUE,
risk.table = TRUE,
censor.shape = NA,      # remove vertical censoring marks
conf.int = TRUE,
xlab = "Time (days)",
ylab = "Survival Probability",
legend.title = "",
legend.labs = labels,
palette = "Dark2",
risk.table.fontsize = 2,
tables.theme = theme_bw(base_size = 8),
break.time.by = 365       # tick every 365 days
)
# Extract the tooth code (part after :)
survival_combined_clean <- survival_results_clean  %>%
mutate(
Tooth_Code = sub(".*:", "", Tooth_ID),
Tooth_Type = ifelse(Tooth_Code %in% as.character(1:32), "Permanent",
ifelse(Tooth_Code %in% LETTERS[1:20], "Primary", NA))
)
# Check distribution
table(survival_combined_clean$Tooth_Type, useNA = "ifany")
# Build survival object
surv_obj <- Surv(
time = survival_combined_clean$Survival_Time_Days,
event = survival_combined_clean$Event_Observed
)
# Fit Kaplan-Meier by tooth type
fit <- survfit(surv_obj ~ Tooth_Type, data = survival_combined_clean)
# Plot survival curves
ggsurvplot(
fit,
data = survival_combined_clean,
risk.table = TRUE,
pval = TRUE,
conf.int = TRUE,
censor.shape = NA,      # remove vertical censoring marks
legend.title = "Tooth Type",
legend.labs = c("Permanent", "Primary"),
xlab = "Days",
ylab = "Survival Probability",
break.time.by = 365       # tick every 365 days
)
# Create a Surv object
surv_object <- Surv(time = survival_combined_clean$Survival_Time_Days,
event = survival_combined_clean$Event_Observed)
# Fit a survival model by 'code'
fit <- survfit(surv_object ~ code, data = survival_combined_clean)
survival_results1=qread(paste(path, "survival_results_for_code", 3220, ".qs", sep=""))
survival_results2=qread(paste(path, "survival_results_for_code", 3120, ".qs", sep=""))
survival_combined=rbind(survival_results1, survival_results2)
survival_combined$code=c(rep("3220", nrow(survival_results1)), rep("3120", nrow(survival_results2)))
survival_combined_clean <- survival_combined[!grepl("^9999", survival_combined$End_Date), ]
# Create a Surv object
surv_object <- Surv(time = survival_combined_clean$Survival_Time_Days,
event = survival_combined_clean$Event_Observed)
# Fit a survival model by 'code'
fit <- survfit(surv_object ~ code, data = survival_combined_clean)
# Plot the survival curves
ggsurvplot(
fit,
data = survival_combined_clean,
pval = TRUE,                # Add p-value for log-rank test
conf.int = TRUE,            # Add confidence intervals
censor.shape = NA,      # remove vertical censoring marks
risk.table = TRUE,          # Show number at risk
legend.title = "Code",
xlab = "Time in Days",
ylab = "Survival Probability",
palette = "Dark2",           # Use a nice color palette
risk.table.fontsize = 3    # smaller font size (try 2 to 4 for smaller text)
)
# Create a Surv object
surv_object <- Surv(time = survival_combined_clean$Survival_Time_Days,
event = survival_combined_clean$Event_Observed)
# Fit a survival model by 'code'
fit <- survfit(surv_object ~ code, data = survival_combined_clean)
# Plot the survival curves
ggsurvplot(
fit,
data = survival_combined_clean,
pval = TRUE,                # Add p-value for log-rank test
conf.int = TRUE,            # Add confidence intervals
censor.shape = NA,      # remove vertical censoring marks
risk.table = TRUE,          # Show number at risk
legend.title = "Code",
xlab = "Time in Days",
ylab = "Survival Probability",
palette = "Dark2",           # Use a nice color palette
risk.table.fontsize = 3,    # smaller font size (try 2 to 4 for smaller text)
break.time.by = 365       # tick every 365 days
)
# Extract the tooth code (part after :)
survival_combined_clean <- survival_results_clean %>%
mutate(
Tooth_Code = sub(".*:", "", Tooth_ID),
Tooth_Type = ifelse(Tooth_Code %in% as.character(1:32), "Permanent",
ifelse(Tooth_Code %in% LETTERS[1:20], "Primary", NA))
)
# Check distribution
table(survival_combined_clean$Tooth_Type, useNA = "ifany")
# Build survival object
surv_obj <- Surv(
time = survival_combined_clean$Survival_Time_Days,
event = survival_combined_clean$Event_Observed
)
# Fit Kaplan-Meier by tooth type
fit <- survfit(surv_obj ~ Tooth_Type, data = survival_combined_clean)
# Plot survival curves
ggsurvplot(
fit,
data = survival_combined_clean,
risk.table = TRUE,
pval = TRUE,
conf.int = TRUE,
censor.shape = NA,      # remove vertical censoring marks
legend.title = "Tooth Type",
legend.labs = c("Permanent", "Primary"),
xlab = "Days",
ylab = "Survival Probability",
risk.table.fontsize = 3,
break.time.by = 365       # tick every 365 days
)
setwd("C:\\Shengtong\\Research\\rare-var\\TestMIRAGEPackage\\mirage\\mirage\\")
devtools::document()
pkgdown::build_site()
knitr::opts_chunk$set(collapse = TRUE,comment = "#",fig.width = 4.5,
fig.height = 3,fig.align = "center",
fig.cap = "&nbsp;",dpi = 120)
devtools::install_github('xinhe-lab/mirage')
library(mirage)
mirage
data(mirage_toy)
head(mirage_toy)
res=mirage(mirage_toy,n1=4315,n2=4315)
library(mirage)
mirage
devtools::install_github('xinhe-lab/mirage')
library(mirage)
mirage
devtools::install_github('xinhe-lab/mirage')
library(mirage)
mirage
devtools::document()
pkgdown::build_site()
devtools::install_github('xinhe-lab/mirage')
library(mirage)
mirage
data(mirage_toy)
head(mirage_toy)
res=mirage(mirage_toy,n1=4315,n2=4315)
names(res)
res$delta.est
res$delta.pvalue
res$eta.est
res$eta.pvalue
res_fixed_eta=mirage(mirage_toy,n1=4315,n2=4315, estimate.eta = F, fixed.eta = c(0.60, 0.31, 0.16, 0.4))
devtools::document()
pkgdown::build_site()
devtools::install_github('xinhe-lab/mirage')
library(mirage)
mirage
res_fixed_eta=mirage(mirage_toy,n1=4315,n2=4315, estimate.eta = F, fixed.eta = c(0.60, 0.31, 0.16, 0.4))
res_fixed_eta=mirage(mirage_toy,n1=4315,n2=4315, estimate.eta = F, fixed.eta = c(0.60, 0.31, 0.16, 0.4, 0.2))
head(res_fixed_eta$BF.gene)
head(res_fixed_eta$BF.all[1]) # variant information in the first gene
head(res_fixed_eta$BF.all[1], n=5) # variant information in the first gene
devtools::document()
pkgdown::build_site()
devtools::install_github('xinhe-lab/mirage')
library(mirage)
res=mirage(mirage_toy,n1=4315,n2=4315)
head(res$BF.PP.gene)
head(res$BF.all[1],n = 5) # variant information in the first gene
res$delta.est
res$eta.est
mirage
res$eta.est
res$delta.est
devtools::document()
pkgdown::build_site()
head(res$BF.PP.gene)
res$delta.est
res$eta.est
devtools::document()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
res$eta.est
devtools::document()
pkgdown::build_site()
library(rprojroot)
root <- rprojroot::find_rstudio_root_file()
source(file.path(root, "analysis/Rfunctions.R"))
root <- rprojroot::find_rstudio_root_file()
data=read.csv((file.path(root, "../2025/202506/Arndt/Trueness_Dynamic Navigation Implant Insertion.csv")), header=T)
Trueness_falcon=read.csv((file.path(root, "../2025/202506/Arndt/Trueness_FALCON 2025.csv")), header=T)
Trueness_falcon_introperator=read.csv((file.path(root, "../2025/202506/Arndt/Trueness_FALCON Intraoperator 2025.csv")), header=T)
Trueness_falcon__new=read.csv((file.path(root, "../2025/202506/Arndt/Trueness_FALCON 2025 Operator Simulated Surgeries.csv")), header=T)
Trueness_falcon__new
library(irr)
# Number of samples per operator
n_samples <- length(unique(Trueness_falcon__new$Sample)) / 3  # assuming 3 operators
# Create a sample index
Trueness_falcon_introperator <- Trueness_falcon__new %>%
arrange(Operator) %>%   # optional: sort by Operator
mutate(sample_index = rep(1:n_samples, times = 3))
data_wide <- Trueness_falcon_introperator %>%
pivot_wider(
id_cols = sample_index,
names_from = Operator,
values_from = c(Angle, Base3Doffset, Basedistal,
Basevestibular, Baseapical, Tip3Doffset, Tipdistal,
Tipvestibular, Tipapical, Apical),
names_sep = "_"
)
#head(data_wide)
vars_to_test <- c("Angle", "Base3Doffset", "Basedistal",
"Basevestibular", "Baseapical", "Tip3Doffset",
"Tipdistal", "Tipvestibular", "Tipapical", "Apical")
icc_df <- data.frame(Variable = vars_to_test, ICC = NA, p_value = NA)
# Loop through variables
for (var in vars_to_test) {
# Select columns for this variable (all operators)
cols <- grep(paste0("^", var, "_"), colnames(data_wide), value = TRUE)
icc_data <- data_wide[, cols]
# Calculate ICC
icc_res <- icc(icc_data, model="twoway", type="agreement", unit="single")
# Store results
icc_df$ICC[icc_df$Variable == var] <- round(icc_res$value,4)
icc_df$p_value[icc_df$Variable == var] <- pvalue_adjust(icc_res$p.value)
}
# View results
icc_df%>%
datatable(extensions = 'Buttons',
caption = "",
options = list(dom = 'Blfrtip',
buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),
lengthMenu = list(c(10,25,50,-1),
c(10,25,50,"All"))))
data_wide
Trueness_falcon_C_and_D=read.csv((file.path(root, "../2025/202506/Arndt/Trueness_FALCON 2025 Workflows C and D PLUS Smart Glasses.csv")), header=T)
Trueness_falcon_C_and_D
Trueness_falcon_C_and_D=as_tibble(read.csv((file.path(root, "../2025/202506/Arndt/Trueness_FALCON 2025 Workflows C and D PLUS Smart Glasses.csv")), header=T))
Trueness_falcon_C_and_D
unique(Trueness_falcon_C_and_D$Workflow)
# keep only Workflow 1 and 4
df <- subset(Trueness_falcon_C_and_D, Workflow %in% c(1, 4))
df$Workflow <- droplevels(factor(df$Workflow))  # drop unused levels
# variables of interest
vars <- c("Angle", "Base3Doffset", "Basedistal", "Basevestibular",
"Baseapical", "Tip3Doffset", "Tipdistal",
"Tipvestibular", "Tipapical", "Apical")
# run two-sample t-tests
results <- lapply(vars, function(v) {
formula <- as.formula(paste(v, "~ Workflow"))
test <- t.test(formula, data = df)
data.frame(
Variable = v,
p_value  = pvalue_adjust(test$p.value),
mean_WFC_workflowC = mean(df[df$Workflow == 1, v], na.rm = TRUE),
mean_WFC_SmartGalsses = mean(df[df$Workflow == 4, v], na.rm = TRUE)
)
})
# combine into a single data frame
results_df <- do.call(rbind, results)
results_df%>%
datatable(extensions = 'Buttons',
caption = "",
options = list(dom = 'Blfrtip',
buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),
lengthMenu = list(c(10,25,50,-1),
c(10,25,50,"All"))))
df
df
results
# keep only Workflow 1 and 4
df <- subset(Trueness_falcon_C_and_D, Workflow %in% c(1, 4))
df$Workflow <- droplevels(factor(df$Workflow))  # drop unused levels
# variables of interest
vars <- c("Angle", "Base3Doffset", "Basedistal", "Basevestibular",
"Baseapical", "Tip3Doffset", "Tipdistal",
"Tipvestibular", "Tipapical", "Apical")
df
# run two-sample t-tests
results <- lapply(vars, function(v) {
formula <- as.formula(paste(v, "~ Workflow"))
test <- t.test(formula, data = df)
data.frame(
Variable = v,
p_value  = pvalue_adjust(test$p.value),
mean_WFC_workflowC = mean(df[df$Workflow == 1, v], na.rm = TRUE),
mean_WFC_SmartGalsses = mean(df[df$Workflow == 4, v], na.rm = TRUE)
)
})
results
mean(df[df$Workflow == 1, "Angle"], na.rm = TRUE)
mean(df[df$Workflow == "1", "Angle"], na.rm = TRUE)
mean(df[df$Workflow == "1", Angle], na.rm = TRUE)
# run two-sample t-tests
results <- lapply(vars, function(v) {
formula <- as.formula(paste(v, "~ Workflow"))
test <- t.test(formula, data = df)
data.frame(
Variable = v,
p_value  = pvalue_adjust(test$p.value),
mean_WFC_workflowC = mean(df[df$Workflow == "1", v], na.rm = TRUE),
mean_WFC_SmartGalsses = mean(df[df$Workflow == "4", v], na.rm = TRUE)
)
})
results
str(df$Workflow)
unique(df$Workflow)
df[df$Workflow == "1", "Angle"]
Trueness_falcon_C_and_D=read.csv((file.path(root, "../2025/202506/Arndt/Trueness_FALCON 2025 Workflows C and D PLUS Smart Glasses.csv")), header=T)
# keep only Workflow 1 and 4
df <- subset(Trueness_falcon_C_and_D, Workflow %in% c(1, 4))
df$Workflow <- droplevels(factor(df$Workflow))  # drop unused levels
# variables of interest
vars <- c("Angle", "Base3Doffset", "Basedistal", "Basevestibular",
"Baseapical", "Tip3Doffset", "Tipdistal",
"Tipvestibular", "Tipapical", "Apical")
# run two-sample t-tests
results <- lapply(vars, function(v) {
formula <- as.formula(paste(v, "~ Workflow"))
test <- t.test(formula, data = df)
data.frame(
Variable = v,
p_value  = pvalue_adjust(test$p.value),
mean_WFC_workflowC = mean(df[df$Workflow == "1", v], na.rm = TRUE),
mean_WFC_SmartGalsses = mean(df[df$Workflow == "4", v], na.rm = TRUE)
)
})
# combine into a single data frame
results_df <- do.call(rbind, results)
results_df%>%
datatable(extensions = 'Buttons',
caption = "",
options = list(dom = 'Blfrtip',
buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),
lengthMenu = list(c(10,25,50,-1),
c(10,25,50,"All"))))
head(Trueness_falcon_C_and_D)
# Convert Workflow to factor
Trueness_falcon_C_and_D$Workflow <- factor(Trueness_falcon_C_and_D$Workflow,
levels = c(1,2,3,4),
labels = c("Workflow_C_WFC", "Workflow_D_WFD", "Smart_Glasses_WFD", "Smart_Glasses_WFC"))
# Variables of interest
vars <- c("Angle", "Base3Doffset", "Basedistal",
"Basevestibular", "Baseapical", "Tip3Doffset",
"Tipdistal", "Tipvestibular", "Tipapical", "Apical")
# Initialize lists to store results
anova_results <- list()
tukey_results <- list()
for (v in vars) {
formula <- as.formula(paste(v, "~ Workflow"))
# Run ANOVA
fit <- aov(formula, data = Trueness_falcon_nd_xnac)
summary_fit <- summary(fit)[[1]]
anova_results[[v]] <- data.frame(
Variable = v,
# Df = summary_fit[1, "Df"],
#  F_value = summary_fit[1, "F value"],
p_value = pvalue_adjust(summary_fit[1, "Pr(>F)"]),
row.names = NULL
)
# If ANOVA is significant, run Tukey HSD
if (summary_fit[1, "Pr(>F)"] < 0.05) {
tukey <- TukeyHSD(fit, "Workflow")
# Convert to tidy data frame
tukey_df <- as.data.frame(tukey$Workflow)
tukey_df$Comparison <- rownames(tukey_df)
tukey_df$Variable <- v
rownames(tukey_df) <- NULL
tukey_results[[v]] <- tukey_df[, c("Variable", "Comparison", "diff", "lwr", "upr", "p adj")]
}
}
# Convert Workflow to factor
Trueness_falcon_C_and_D$Workflow <- factor(Trueness_falcon_C_and_D$Workflow,
levels = c(1,2,3,4),
labels = c("Workflow_C_WFC", "Workflow_D_WFD", "Smart_Glasses_WFD", "Smart_Glasses_WFC"))
# Variables of interest
vars <- c("Angle", "Base3Doffset", "Basedistal",
"Basevestibular", "Baseapical", "Tip3Doffset",
"Tipdistal", "Tipvestibular", "Tipapical", "Apical")
# Initialize lists to store results
anova_results <- list()
tukey_results <- list()
for (v in vars) {
formula <- as.formula(paste(v, "~ Workflow"))
# Run ANOVA
fit <- aov(formula, data = Trueness_falcon_C_and_D)
summary_fit <- summary(fit)[[1]]
anova_results[[v]] <- data.frame(
Variable = v,
# Df = summary_fit[1, "Df"],
#  F_value = summary_fit[1, "F value"],
p_value = pvalue_adjust(summary_fit[1, "Pr(>F)"]),
row.names = NULL
)
# If ANOVA is significant, run Tukey HSD
if (summary_fit[1, "Pr(>F)"] < 0.05) {
tukey <- TukeyHSD(fit, "Workflow")
# Convert to tidy data frame
tukey_df <- as.data.frame(tukey$Workflow)
tukey_df$Comparison <- rownames(tukey_df)
tukey_df$Variable <- v
rownames(tukey_df) <- NULL
tukey_results[[v]] <- tukey_df[, c("Variable", "Comparison", "diff", "lwr", "upr", "p adj")]
}
}
v
formula
fit <- aov(formula, data = Trueness_falcon_C_and_D)
Trueness_falcon_C_and_D
head(Trueness_falcon_C_and_D)
# Convert Workflow to factor
Trueness_falcon_C_and_D$Workflow <- factor(Trueness_falcon_C_and_D$Workflow,
levels = c(1,2,3,4),
labels = c("Workflow_C_WFC", "Workflow_D_WFD", "Smart_Glasses_WFD", "Smart_Glasses_WFC"))
head(Trueness_falcon_C_and_D)
Trueness_falcon_C_and_D=read.csv((file.path(root, "../2025/202506/Arndt/Trueness_FALCON 2025 Workflows C and D PLUS Smart Glasses.csv")), header=T)
# Convert Workflow to factor
Trueness_falcon_C_and_D$Workflow <- factor(Trueness_falcon_C_and_D$Workflow,
levels = c(1,2,3,4),
labels = c("Workflow_C_WFC", "Workflow_D_WFD", "Smart_Glasses_WFD", "Smart_Glasses_WFC"))
# Variables of interest
vars <- c("Angle", "Base3Doffset", "Basedistal",
"Basevestibular", "Baseapical", "Tip3Doffset",
"Tipdistal", "Tipvestibular", "Tipapical", "Apical")
# Initialize lists to store results
anova_results <- list()
tukey_results <- list()
for (v in vars) {
formula <- as.formula(paste(v, "~ Workflow"))
# Run ANOVA
fit <- aov(formula, data = Trueness_falcon_C_and_D)
summary_fit <- summary(fit)[[1]]
anova_results[[v]] <- data.frame(
Variable = v,
# Df = summary_fit[1, "Df"],
#  F_value = summary_fit[1, "F value"],
p_value = pvalue_adjust(summary_fit[1, "Pr(>F)"]),
row.names = NULL
)
# If ANOVA is significant, run Tukey HSD
if (summary_fit[1, "Pr(>F)"] < 0.05) {
tukey <- TukeyHSD(fit, "Workflow")
# Convert to tidy data frame
tukey_df <- as.data.frame(tukey$Workflow)
tukey_df$Comparison <- rownames(tukey_df)
tukey_df$Variable <- v
rownames(tukey_df) <- NULL
tukey_results[[v]] <- tukey_df[, c("Variable", "Comparison", "diff", "lwr", "upr", "p adj")]
}
}
# Combine ANOVA results
anova_results_df <- do.call(rbind, anova_results)
# Combine Tukey results
tukey_results_df <- do.call(rbind, tukey_results)
tukey_results_df$diff=round(tukey_results_df$diff,4)
tukey_results_df$lwr=round(tukey_results_df$lwr,4)
tukey_results_df$upr=round(tukey_results_df$upr,4)
tukey_results_df$`p adj`=pvalue_adjust(tukey_results_df$`p adj`)
# View results
anova_results_df%>%
datatable(extensions = 'Buttons',
caption = "",
options = list(dom = 'Blfrtip',
buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),
lengthMenu = list(c(10,25,50,-1),
c(10,25,50,"All"))))
tukey_results_df%>%
datatable(extensions = 'Buttons',
caption = "post-hoc pairwise comparisons",
options = list(dom = 'Blfrtip',
buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),
lengthMenu = list(c(10,25,50,-1),
c(10,25,50,"All"))))
