library(survminer)
# Create the survival object
surv_obj <- Surv(time = survival_results_clean$Survival_Time_Days,
event = survival_results_clean$Event_Observed)
# Fit the Kaplan-Meier model
km_fit <- survfit(surv_obj ~ 1, data = survival_results_clean)
# Plot the KM curve: red curve, gray confidence interval
ggsurvplot(km_fit,
data = survival_results_clean,
conf.int = TRUE,
conf.int.fill = "gray",       # Set confidence band to gray
xlab = "Time (days)",
ylab = "Survival probability",
title = "Kaplan-Meier Curve for Tooth Survival",
palette = "red")              # Set curve color to red
# Extract the tooth code (part after :)
survival_combined_clean <- survival_combined_clean %>%
mutate(
Tooth_Code = sub(".*:", "", Tooth_ID),
Tooth_Type = ifelse(Tooth_Code %in% as.character(1:32), "Permanent",
ifelse(Tooth_Code %in% LETTERS[1:20], "Primary", NA))
)
# Check distribution
table(survival_combined_clean$Tooth_Type, useNA = "ifany")
# Build survival object
surv_obj <- Surv(
time = survival_combined_clean$Survival_Time_Days,
event = survival_combined_clean$Event_Observed
)
# Fit Kaplan-Meier by tooth type
fit <- survfit(surv_obj ~ Tooth_Type, data = survival_combined_clean)
# Plot survival curves
ggsurvplot(
fit,
data = survival_combined_clean,
risk.table = TRUE,
pval = TRUE,
conf.int = TRUE,
censor.shape = NA,      # remove vertical censoring marks
legend.title = "Tooth Type",
legend.labs = c("Permanent", "Primary"),
xlab = "Days",
ylab = "Survival Probability"
)
survival_results=qread(paste(path, "survival_results_for_code3220.qs", sep=""))
# Assuming your data frame is named survival_results
survival_results_clean <- survival_results[!grepl("^9999", survival_results$End_Date), ]
survival_combined_clean
head(survival_combined_clean)
unique(survival_combined_clean$Tooth_Type)
count(survival_combined_clean$provider_specialty)
dplyr::count(survival_combined_clean$provider_specialty)
(survival_combined_clean$provider_specialty)
table(survival_combined_clean$provider_specialty)
start_code=3120
survival_results=qread(paste(path, "survival_results_for_code", start_code, ".qs", sep=""))
# Assuming your data frame is named survival_results
survival_results_clean <- survival_results[!grepl("^9999", survival_results$End_Date), ]
table(survival_results_clean$provider_specialty)
survival_results=qread(paste(path, "survival_results_for_code3220.qs", sep=""))
# Assuming your data frame is named survival_results
survival_results_clean <- survival_results[!grepl("^9999", survival_results$End_Date), ]
head(survival_combined_clean)
table(survival_results_clean$Tooth_Type)
start_code=3120
survival_results=qread(paste(path, "survival_results_for_code", start_code, ".qs", sep=""))
# Assuming your data frame is named survival_results
survival_results_clean <- survival_results[!grepl("^9999", survival_results$End_Date), ]
table(survival_results_clean$provider_specialty)
library(survival)
library(survminer)
# Create the survival object
surv_obj <- Surv(time = survival_results_clean$Survival_Time_Days,
event = survival_results_clean$Event_Observed)
# Fit the Kaplan-Meier model
km_fit <- survfit(surv_obj ~ 1, data = survival_results_clean)
# Plot the KM curve: red curve, gray confidence interval
ggsurvplot(km_fit,
data = survival_results_clean,
conf.int = TRUE,
# conf.int.fill = "gray",       # Set confidence band to gray
censor.shape = NA,      # remove vertical censoring marks
xlab = "Time (days)",
ylab = "Survival probability",
title = "Kaplan-Meier Curve for Tooth Survival",
palette = "red")              # Set curve color to red
fit <- survfit(Surv(Survival_Time_Days, Event_Observed) ~ provider_specialty, data = survival_results_clean)
# Extract labels in the correct order
labels <- sub(".*=", "", names(fit$strata))
ggsurvplot(fit,
data = survival_results_clean,
pval = TRUE,
risk.table = TRUE,
xlab = "Time (days)",
ylab = "Survival Probability",
legend.title = "",
legend.labs = labels,
palette = "Dark2",
risk.table.fontsize = 2,
tables.theme = theme_bw(base_size = 8))
fit <- survfit(Surv(Survival_Time_Days, Event_Observed) ~ provider_specialty, data = survival_results_clean)
# Extract labels in the correct order
labels <- sub(".*=", "", names(fit$strata))
ggsurvplot(fit,
data = survival_results_clean,
pval = TRUE,
risk.table = TRUE,
censor.shape = NA,      # remove vertical censoring marks
conf.int = TRUE,
xlab = "Time (days)",
ylab = "Survival Probability",
legend.title = "",
legend.labs = labels,
palette = "Dark2",
risk.table.fontsize = 2,
tables.theme = theme_bw(base_size = 8))
survival_results=qread(paste(path, "survival_results_for_code3220.qs", sep=""))
# Assuming your data frame is named survival_results
survival_results_clean <- survival_results[!grepl("^9999", survival_results$End_Date), ]
table(survival_results_clean$provider_specialty)
library(survival)
library(survminer)
# Create the survival object
surv_obj <- Surv(time = survival_results_clean$Survival_Time_Days,
event = survival_results_clean$Event_Observed)
# Fit the Kaplan-Meier model
km_fit <- survfit(surv_obj ~ 1, data = survival_results_clean)
# Plot the KM curve: red curve, gray confidence interval
ggsurvplot(km_fit,
data = survival_results_clean,
conf.int = TRUE,
#conf.int.fill = "gray",       # Set confidence band to gray
censor.shape = NA,      # remove vertical censoring marks
xlab = "Time (days)",
ylab = "Survival probability",
title = "Kaplan-Meier Curve for Tooth Survival",
palette = "red")              # Set curve color to red
365*5
library(survival)
library(survminer)
# Create the survival object
surv_obj <- Surv(time = survival_results_clean$Survival_Time_Days,
event = survival_results_clean$Event_Observed)
# Fit the Kaplan-Meier model
km_fit <- survfit(surv_obj ~ 1, data = survival_results_clean)
# Plot the KM curve: red curve, gray confidence interval
ggsurvplot(km_fit,
data = survival_results_clean,
conf.int = TRUE,
#conf.int.fill = "gray",       # Set confidence band to gray
censor.shape = NA,      # remove vertical censoring marks
xlab = "Time (days)",
ylab = "Survival probability",
title = "Kaplan-Meier Curve for Tooth Survival",
palette = "red",  # Set curve color to red
break.time.by = 365,      # tick every 365 days
xlim = c(0, 1825)         # up to 5 years (365*5)
)
library(survival)
library(survminer)
# Create the survival object
surv_obj <- Surv(time = survival_results_clean$Survival_Time_Days,
event = survival_results_clean$Event_Observed)
# Fit the Kaplan-Meier model
km_fit <- survfit(surv_obj ~ 1, data = survival_results_clean)
# Plot the KM curve: red curve, gray confidence interval
ggsurvplot(km_fit,
data = survival_results_clean,
risk.table = TRUE,
conf.int = TRUE,
#conf.int.fill = "gray",       # Set confidence band to gray
censor.shape = NA,      # remove vertical censoring marks
xlab = "Time (days)",
ylab = "Survival probability",
title = "Kaplan-Meier Curve for Tooth Survival",
palette = "red",  # Set curve color to red
break.time.by = 365,      # tick every 365 days
xlim = c(0, 1825)         # up to 5 years (365*5)
)
library(survival)
library(survminer)
# Create the survival object
surv_obj <- Surv(time = survival_results_clean$Survival_Time_Days,
event = survival_results_clean$Event_Observed)
# Fit the Kaplan-Meier model
km_fit <- survfit(surv_obj ~ 1, data = survival_results_clean)
# Plot the KM curve: red curve, gray confidence interval
ggsurvplot(km_fit,
data = survival_results_clean,
risk.table = TRUE,
conf.int = TRUE,
#conf.int.fill = "gray",       # Set confidence band to gray
censor.shape = NA,      # remove vertical censoring marks
xlab = "Time (days)",
ylab = "Survival probability",
title = "Kaplan-Meier Curve for Tooth Survival",
palette = "red",  # Set curve color to red
break.time.by = 365       # tick every 365 days
)
fit <- survfit(Surv(Survival_Time_Days, Event_Observed) ~ provider_specialty, data = survival_results_clean)
# Extract labels in the correct order
labels <- sub(".*=", "", names(fit$strata))
ggsurvplot(fit,
data = survival_results_clean,
pval = TRUE,
risk.table = TRUE,
xlab = "Time (days)",
ylab = "Survival Probability",
censor.shape = NA,      # remove vertical censoring marks
legend.title = "",
legend.labs = labels,
palette = "Dark2",
risk.table.fontsize = 2,
tables.theme = theme_bw(base_size = 8))
fit <- survfit(Surv(Survival_Time_Days, Event_Observed) ~ provider_specialty, data = survival_results_clean)
# Extract labels in the correct order
labels <- sub(".*=", "", names(fit$strata))
ggsurvplot(fit,
data = survival_results_clean,
pval = TRUE,
risk.table = TRUE,
xlab = "Time (days)",
ylab = "Survival Probability",
censor.shape = NA,      # remove vertical censoring marks
legend.title = "",
legend.labs = labels,
palette = "Dark2",
risk.table.fontsize = 2,
tables.theme = theme_bw(base_size = 8),
break.time.by = 365       # tick every 365 days
)
# Extract the tooth code (part after :)
survival_combined_clean <- survival_results_clean %>%
mutate(
Tooth_Code = sub(".*:", "", Tooth_ID),
Tooth_Type = ifelse(Tooth_Code %in% as.character(1:32), "Permanent",
ifelse(Tooth_Code %in% LETTERS[1:20], "Primary", NA))
)
# Check distribution
table(survival_combined_clean$Tooth_Type, useNA = "ifany")
# Build survival object
surv_obj <- Surv(
time = survival_combined_clean$Survival_Time_Days,
event = survival_combined_clean$Event_Observed
)
# Fit Kaplan-Meier by tooth type
fit <- survfit(surv_obj ~ Tooth_Type, data = survival_combined_clean)
# Plot survival curves
ggsurvplot(
fit,
data = survival_combined_clean,
risk.table = TRUE,
pval = TRUE,
conf.int = TRUE,
censor.shape = NA,      # remove vertical censoring marks
legend.title = "Tooth Type",
legend.labs = c("Permanent", "Primary"),
xlab = "Days",
ylab = "Survival Probability",
break.time.by = 365       # tick every 365 days
)
start_code=3120
survival_results=qread(paste(path, "survival_results_for_code", start_code, ".qs", sep=""))
# Assuming your data frame is named survival_results
survival_results_clean <- survival_results[!grepl("^9999", survival_results$End_Date), ]
table(survival_results_clean$provider_specialty)
library(survival)
library(survminer)
# Create the survival object
surv_obj <- Surv(time = survival_results_clean$Survival_Time_Days,
event = survival_results_clean$Event_Observed)
# Fit the Kaplan-Meier model
km_fit <- survfit(surv_obj ~ 1, data = survival_results_clean)
# Plot the KM curve: red curve, gray confidence interval
ggsurvplot(km_fit,
data = survival_results_clean,
risk.table = T,
conf.int = TRUE,
# conf.int.fill = "gray",       # Set confidence band to gray
censor.shape = NA,      # remove vertical censoring marks
xlab = "Time (days)",
ylab = "Survival probability",
title = "Kaplan-Meier Curve for Tooth Survival",
palette = "red", # Set curve color to red
break.time.by = 365       # tick every 365 days
)
fit <- survfit(Surv(Survival_Time_Days, Event_Observed) ~ provider_specialty, data = survival_results_clean)
# Extract labels in the correct order
labels <- sub(".*=", "", names(fit$strata))
ggsurvplot(fit,
data = survival_results_clean,
pval = TRUE,
risk.table = TRUE,
censor.shape = NA,      # remove vertical censoring marks
conf.int = TRUE,
xlab = "Time (days)",
ylab = "Survival Probability",
legend.title = "",
legend.labs = labels,
palette = "Dark2",
risk.table.fontsize = 2,
tables.theme = theme_bw(base_size = 8),
break.time.by = 365       # tick every 365 days
)
# Extract the tooth code (part after :)
survival_combined_clean <- survival_results_clean  %>%
mutate(
Tooth_Code = sub(".*:", "", Tooth_ID),
Tooth_Type = ifelse(Tooth_Code %in% as.character(1:32), "Permanent",
ifelse(Tooth_Code %in% LETTERS[1:20], "Primary", NA))
)
# Check distribution
table(survival_combined_clean$Tooth_Type, useNA = "ifany")
# Build survival object
surv_obj <- Surv(
time = survival_combined_clean$Survival_Time_Days,
event = survival_combined_clean$Event_Observed
)
# Fit Kaplan-Meier by tooth type
fit <- survfit(surv_obj ~ Tooth_Type, data = survival_combined_clean)
# Plot survival curves
ggsurvplot(
fit,
data = survival_combined_clean,
risk.table = TRUE,
pval = TRUE,
conf.int = TRUE,
censor.shape = NA,      # remove vertical censoring marks
legend.title = "Tooth Type",
legend.labs = c("Permanent", "Primary"),
xlab = "Days",
ylab = "Survival Probability",
break.time.by = 365       # tick every 365 days
)
# Create a Surv object
surv_object <- Surv(time = survival_combined_clean$Survival_Time_Days,
event = survival_combined_clean$Event_Observed)
# Fit a survival model by 'code'
fit <- survfit(surv_object ~ code, data = survival_combined_clean)
survival_results1=qread(paste(path, "survival_results_for_code", 3220, ".qs", sep=""))
survival_results2=qread(paste(path, "survival_results_for_code", 3120, ".qs", sep=""))
survival_combined=rbind(survival_results1, survival_results2)
survival_combined$code=c(rep("3220", nrow(survival_results1)), rep("3120", nrow(survival_results2)))
survival_combined_clean <- survival_combined[!grepl("^9999", survival_combined$End_Date), ]
# Create a Surv object
surv_object <- Surv(time = survival_combined_clean$Survival_Time_Days,
event = survival_combined_clean$Event_Observed)
# Fit a survival model by 'code'
fit <- survfit(surv_object ~ code, data = survival_combined_clean)
# Plot the survival curves
ggsurvplot(
fit,
data = survival_combined_clean,
pval = TRUE,                # Add p-value for log-rank test
conf.int = TRUE,            # Add confidence intervals
censor.shape = NA,      # remove vertical censoring marks
risk.table = TRUE,          # Show number at risk
legend.title = "Code",
xlab = "Time in Days",
ylab = "Survival Probability",
palette = "Dark2",           # Use a nice color palette
risk.table.fontsize = 3    # smaller font size (try 2 to 4 for smaller text)
)
# Create a Surv object
surv_object <- Surv(time = survival_combined_clean$Survival_Time_Days,
event = survival_combined_clean$Event_Observed)
# Fit a survival model by 'code'
fit <- survfit(surv_object ~ code, data = survival_combined_clean)
# Plot the survival curves
ggsurvplot(
fit,
data = survival_combined_clean,
pval = TRUE,                # Add p-value for log-rank test
conf.int = TRUE,            # Add confidence intervals
censor.shape = NA,      # remove vertical censoring marks
risk.table = TRUE,          # Show number at risk
legend.title = "Code",
xlab = "Time in Days",
ylab = "Survival Probability",
palette = "Dark2",           # Use a nice color palette
risk.table.fontsize = 3,    # smaller font size (try 2 to 4 for smaller text)
break.time.by = 365       # tick every 365 days
)
# Extract the tooth code (part after :)
survival_combined_clean <- survival_results_clean %>%
mutate(
Tooth_Code = sub(".*:", "", Tooth_ID),
Tooth_Type = ifelse(Tooth_Code %in% as.character(1:32), "Permanent",
ifelse(Tooth_Code %in% LETTERS[1:20], "Primary", NA))
)
# Check distribution
table(survival_combined_clean$Tooth_Type, useNA = "ifany")
# Build survival object
surv_obj <- Surv(
time = survival_combined_clean$Survival_Time_Days,
event = survival_combined_clean$Event_Observed
)
# Fit Kaplan-Meier by tooth type
fit <- survfit(surv_obj ~ Tooth_Type, data = survival_combined_clean)
# Plot survival curves
ggsurvplot(
fit,
data = survival_combined_clean,
risk.table = TRUE,
pval = TRUE,
conf.int = TRUE,
censor.shape = NA,      # remove vertical censoring marks
legend.title = "Tooth Type",
legend.labs = c("Permanent", "Primary"),
xlab = "Days",
ylab = "Survival Probability",
risk.table.fontsize = 3,
break.time.by = 365       # tick every 365 days
)
knitr::opts_chunk$set(collapse = TRUE,comment = "#",fig.width = 4.5,
fig.height = 3,fig.align = "center",
fig.cap = "&nbsp;",dpi = 120)
library(mirage)
mirage
data(mirage_toy)
head(mirage_toy)
res=mirage(mirage_toy,n1=4315,n2=4315)
head(res$BF.PP.gene)
########## after run MIRAGE,  given a gene, calculate the BF of every variant group.
num_category=length(levels(as.factor(mirage_toy[mirage_toy$Gene =="LPA",]$group.index))) # number of variant groups
variant_full_infor=res$BF.all[[1]]  # extract results for first gene
variant_group_BF=numeric() # store variant group BF for a given gene
for (j in 1:num_category)
{
if (sum(variant_full_infor$original.index==j)==0) # no variants in this group
variant_group_BF[j]=NA
if (sum(variant_full_infor$original.index==j)>0) # variants exist in this group
variant_group_BF[j]=prod(1-res$eta.est[j]+res$eta.est[j]*
variant_full_infor[which(variant_full_infor$original.index==j),]$var.BF)
# product of BF of variants within that variant group
}
variant_group_BF
num_category
res$BF.all
res$BF.PP.gene
########## after run MIRAGE,  given a gene, calculate the BF of every variant group.
gene_name="LPA"
num_category=length(levels(as.factor(mirage_toy[mirage_toy$Gene ==gene_name,]$group.index))) # number of variant groups
num_category
which(res$BF.PP.gene$Gene==gene_name)
########## after run MIRAGE,  given a gene, calculate the BF of every variant group.
gene_name="LPA"
num_category=length(levels(as.factor(mirage_toy[mirage_toy$Gene ==gene_name,]$group.index))) # number of variant groups in this gene
variant_full_infor=res$BF.all[[which(res$BF.PP.gene$Gene==gene_name)]]  # extract results for this gene
variant_group_BF=numeric() # store variant group BF for a given gene
for (j in 1:num_category)
{
if (sum(variant_full_infor$original.index==j)==0) # no variants in this group
variant_group_BF[j]=NA
if (sum(variant_full_infor$original.index==j)>0) # variants exist in this group
variant_group_BF[j]=prod(1-res$eta.est[j]+res$eta.est[j]*
variant_full_infor[which(variant_full_infor$original.index==j),]$var.BF)
# product of BF of variants within that variant group
}
variant_group_BF
gene_name <- "LPA"
# Number of variant groups for this gene
num_category <- nlevels(factor(mirage_toy$group.index[mirage_toy$Gene == gene_name]))
# Extract variant-level results for this gene
variant_full_infor <- res$BF.all[[which(res$BF.PP.gene$Gene == gene_name)]]
# Compute group-level BF
variant_group_BF <- sapply(seq_len(num_category), function(j) {
idx <- which(variant_full_infor$original.index == j)
if (length(idx) == 0) {
return(NA_real_)
} else {
return(prod(1 - res$eta.est[j] + res$eta.est[j] * variant_full_infor$var.BF[idx]))
}
})
variant_group_BF
seq_len(num_category)
num_category
seq_len(5)
factor(mirage_toy$group.index[mirage_toy$Gene == gene_name])
num_category=5
# Compute group-level BF
variant_group_BF <- sapply(seq_len(num_category), function(j) {
idx <- which(variant_full_infor$original.index == j)
if (length(idx) == 0) {
return(NA_real_)
} else {
return(prod(1 - res$eta.est[j] + res$eta.est[j] * variant_full_infor$var.BF[idx]))
}
})
variant_group_BF
res=mirage(mirage_toy,n1=4315,n2=4315, estimate.eta = F, fixed.eta = c(0.10, 0.31, 0.16, 0.5))
mirage
unique(mirage_toy$group.index)
res=mirage(mirage_toy,n1=4315,n2=4315, estimate.eta = F, fixed.eta = c(0.60, 0.31, 0.16, 0.4, 0.2, 0.1))
res=mirage(mirage_toy,n1=4315,n2=4315, estimate.eta = F, fixed.eta = c(0.60, 0.31, 0.16, 0.4, 0.2))
res
names(res)
res$BF.gene
mirage
head(res$BF.gene)
names(res)
head(res$BF.all[1],n = 5) # variant information in the first gene
setwd("C:\\Shengtong\\Research\\rare-var\\TestMIRAGEPackage\\mirage\\mirage\\")
devtools::document()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
getwd()
install.packages("curl")
packageVersion("curl")
devtools::document()
pkgdown::build_site()
