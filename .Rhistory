} # end of g
sum.lkhd=sum(cate.stat)
##############################################
return(result=list(delta.est=delta.est[iter-1], delta.pvalue=pvalue[length(pvalue)], beta.est=beta.k[(iter-1),], beta.stat=cate.stat, beta.pvalue=cate.pvalue, BF.gene=data.frame(Gene=unique.gene, BF=BF.gene[(iter-1),], LoF.BF=LoF.BF.gene[(iter-1),], nonLoF.BF=nonLoF.BF.gene[(iter-1),]), full.info=full.info.genevar, Eui=EUi))
}
mirage
install.packages("Rtools")
library(mirage)
gene.data=eight.partition(cand.data)
ds.asd.result=mirage(gene.data, n1=2403, n2=2403)
.rs.restartR()
library("devtools")
install.packages("Rtools")
install_github('xinhe-lab/mirage')
library(mirage)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
install.packages("tidyverse")
rm(list=ls())
start.time=date()
cat("program starts at", date(),"\n\n")
ptm <- proc.time()
library(car)
library(Rsolnp)
no.site=650;  no.sub=100;
no.clust=2    #  parameter settings
coff.para=matrix(nrow=no.clust, ncol=3)
coff.para[1,]=c(-4.2, 1.2, 2.5)            # choose the parameters such that the two parameters for children are not far away
coff.para[2,]=c(-2.7, 3, 2.5)
#coff.para[3,]=c(-2.3, 0, 0)
#coff.para[3,]=c(0.4, 0, 0)
#coff.para[4,]=c(1.4, -1.5, -0.6)
para.moth=matrix(nrow=no.site, ncol=2)
para.fath=matrix(nrow=no.site, ncol=2)
para.child=matrix(nrow=no.site, ncol=2)
for (i in 1:no.site)                 # genearate  parameters for each site
{
para.moth[i,]=abs(rnorm(2,5,0.5))
para.fath[i,]=abs(rnorm(2,7,0.5))
para.child[i,1]=abs(rnorm(1,10,0.5))
}
for (i in 1:no.site)
#for (j in 1:no.clust)
# if (i>=((j-1)*no.site/no.clust+1) & i<=(j*no.site/no.clust))
{
if (i >=1 & i<=no.site/no.clust)
j=1
if (i >=(1+no.site)/no.clust & i<=2*no.site/no.clust)
j=2
if (i >=(1+2*no.site)/no.clust & i<=3*no.site/no.clust)
j=3
if (i >=(1+3*no.site)/no.clust & i<=4*no.site/no.clust)
j=4
para.child[i,2]=(para.child[i,1]/exp(coff.para[j,1]))*(para.moth[i,2]/para.moth[i,1])^coff.para[j,2]*(para.fath[i,2]/para.fath[i,1])^coff.para[j,3]
}
cluster.stat=list()
lkhd.distance=list()
all.clust=list()
#################################################
gamma.true=matrix(nrow=2,ncol=3)
gamma.true=coff.para
max.iter=1; num.cluster=2; accu=matrix(nrow=max.iter,ncol=num.cluster)
bic=numeric();  All.Data=list()
num.iter=1
Data=list()
#############################################
moth.data=matrix(nrow=no.sub,ncol=no.site)
fath.data=matrix(nrow=no.sub,ncol=no.site)
child.data=matrix(nrow=no.sub,ncol=no.site)
#  ############  version 2: each CpG sites has its own parameter ############
for (i in 1:no.site)
{
moth.data[,i]=rbeta(no.sub, para.moth[i,1], para.moth[i,2])
fath.data[,i]=rbeta(no.sub, para.fath[i,1], para.fath[i,2])
child.data[,i]=rbeta(no.sub, para.child[i,1], para.child[i,2])
for (j in 1:no.sub)
if (child.data[j,i]==1)
child.data[j,i]= child.data[j,i]-threshold
}
Data[[1]]=moth.data
Data[[2]]=fath.data
Data[[3]]=child.data
All.Data[[num.iter]]=Data
moth.data
dim(moth.data)
moth.data[1:5,1:5]
rm(list=ls())
start.time=date()
cat("program starts at", date(),"\n\n")
ptm <- proc.time()
library(car)
library(Rsolnp)
############# Jiajing's coefficient####################
no.site=650;  no.sub=100;
no.clust=2    #  parameter settings
coff.para=matrix(nrow=no.clust, ncol=3)
coff.para[1,]=c(-4.2, 1.2, 2.5)            # choose the parameters such that the two parameters for children are not far away
coff.para[2,]=c(-2.7, 3, 2.5)
#coff.para[3,]=c(-2.3, 0, 0)
#coff.para[3,]=c(0.4, 0, 0)
#coff.para[4,]=c(1.4, -1.5, -0.6)
##########################################################
###############  version 2: each CpG site has its own parameters ##############
para.moth=matrix(nrow=no.site, ncol=2)
para.fath=matrix(nrow=no.site, ncol=2)
para.child=matrix(nrow=no.site, ncol=2)
for (i in 1:no.site)                 # genearate  parameters for each site
{
para.moth[i,]=abs(rnorm(2,5,0.5))
para.fath[i,]=abs(rnorm(2,7,0.5))
para.child[i,1]=abs(rnorm(1,10,0.5))
}
for (i in 1:no.site)
#for (j in 1:no.clust)
# if (i>=((j-1)*no.site/no.clust+1) & i<=(j*no.site/no.clust))
{
if (i >=1 & i<=no.site/no.clust)
j=1
if (i >=(1+no.site)/no.clust & i<=2*no.site/no.clust)
j=2
if (i >=(1+2*no.site)/no.clust & i<=3*no.site/no.clust)
j=3
if (i >=(1+3*no.site)/no.clust & i<=4*no.site/no.clust)
j=4
para.child[i,2]=(para.child[i,1]/exp(coff.para[j,1]))*(para.moth[i,2]/para.moth[i,1])^coff.para[j,2]*(para.fath[i,2]/para.fath[i,1])^coff.para[j,3]
}
#################### calculate mean & variance for mother, father and child ##################
#moth.var=para.moth[,1]*para.moth[,2]/((para.moth[,1]+para.moth[,2])^2*(para.moth[,1]+para.moth[,2]+1))
#moth.mean=para.moth[,1]/(para.moth[,1]+para.moth[,2])
#fath.var=para.fath[,1]*para.fath[,2]/((para.fath[,1]+para.fath[,2])^2*(para.fath[,1]+para.fath[,2]+1))
#fath.mean=para.fath[,1]/(para.fath[,1]+para.fath[,2])
#child.var=para.child[,1]*para.child[,2]/((para.child[,1]+para.child[,2])^2*(para.child[,1]+para.child[,2]+1))
#child.mean=para.child[,1]/(para.child[,1]+para.child[,2])
###############################################
cluster.stat=list()
lkhd.distance=list()
all.clust=list()
#################################################
gamma.true=matrix(nrow=2,ncol=3)
gamma.true=coff.para
max.iter=1; num.cluster=2; accu=matrix(nrow=max.iter,ncol=num.cluster)
bic=numeric();  All.Data=list()
############# main function ############################
num.iter=1
Data=list()
#############################################
moth.data=matrix(nrow=no.sub,ncol=no.site)
fath.data=matrix(nrow=no.sub,ncol=no.site)
child.data=matrix(nrow=no.sub,ncol=no.site)
#  ############  version 2: each CpG sites has its own parameter ############
for (i in 1:no.site)
{
moth.data[,i]=rbeta(no.sub, para.moth[i,1], para.moth[i,2])
fath.data[,i]=rbeta(no.sub, para.fath[i,1], para.fath[i,2])
child.data[,i]=rbeta(no.sub, para.child[i,1], para.child[i,2])
for (j in 1:no.sub)
if (child.data[j,i]==1)
child.data[j,i]= child.data[j,i]-threshold
}
Data[[1]]=moth.data
Data[[2]]=fath.data
Data[[3]]=child.data
All.Data[[num.iter]]=Data
#############################################
result=list()
cat("number of iteration=",num.iter, "\n")
##############
end.time=date()
cat("program ends at", date(),"\n\n")
time.spent<-proc.time()-ptm
#save(list=ls(),file="2000CpG4cluster81-100.RData")
class(moth.data)
head(moth.data)
dim(head(moth.data))
moth.data[1:5,1:5]
gamma.true
rm(list=ls())
start.time=date()
cat("program starts at", date(),"\n\n")
ptm <- proc.time()
library(car)
library(Rsolnp)
############# Jiajing's coefficient####################
no.site=500;  no.sub=100;
no.clust=2    #  parameter settings
coff.para=matrix(nrow=no.clust, ncol=3)
coff.para[1,]=c(-4.2, 1.2, 2.5)            # choose the parameters such that the two parameters for children are not far away
coff.para[2,]=c(-2.7, 3, 2.5)
#coff.para[3,]=c(-2.3, 0, 0)
#coff.para[3,]=c(0.4, 0, 0)
#coff.para[4,]=c(1.4, -1.5, -0.6)
##########################################################
###############  version 2: each CpG site has its own parameters ##############
para.moth=matrix(nrow=no.site, ncol=2)
para.fath=matrix(nrow=no.site, ncol=2)
para.child=matrix(nrow=no.site, ncol=2)
#for (i in 1:no.site)                 # genearate  parameters for each site
#{
#  para.moth[i,]=abs(rnorm(2,5,0.5))
#  para.fath[i,]=abs(rnorm(2,7,0.5))
#  para.child[i,1]=abs(rnorm(1,10,0.5))
#}
######################### jiajing's code ##############
for (j in 1:no.site){                  # generate parameters for each site
para.moth[j,1]=abs(rnorm(1,5,0.5))
para.moth[j,2]=abs(rnorm(1,7,0.5))
para.fath[j,1]=abs(rnorm(1,5,0.5))
para.fath[j,2]=abs(rnorm(1,15,0.5))
para.child[j,1]=abs(rnorm(1,25,0.5))
}
############################################################
for (i in 1:no.site)
#for (j in 1:no.clust)
# if (i>=((j-1)*no.site/no.clust+1) & i<=(j*no.site/no.clust))
{
if (i >=1 & i<=no.site/no.clust)
j=1
if (i >=(1+no.site)/no.clust & i<=2*no.site/no.clust)
j=2
if (i >=(1+2*no.site)/no.clust & i<=3*no.site/no.clust)
j=3
if (i >=(1+3*no.site)/no.clust & i<=4*no.site/no.clust)
j=4
para.child[i,2]=(para.child[i,1]/exp(coff.para[j,1]))*(para.moth[i,2]/para.moth[i,1])^coff.para[j,2]*(para.fath[i,2]/para.fath[i,1])^coff.para[j,3]
}
#################### calculate mean & variance for mother, father and child ##################
#moth.var=para.moth[,1]*para.moth[,2]/((para.moth[,1]+para.moth[,2])^2*(para.moth[,1]+para.moth[,2]+1))
#moth.mean=para.moth[,1]/(para.moth[,1]+para.moth[,2])
#fath.var=para.fath[,1]*para.fath[,2]/((para.fath[,1]+para.fath[,2])^2*(para.fath[,1]+para.fath[,2]+1))
#fath.mean=para.fath[,1]/(para.fath[,1]+para.fath[,2])
#child.var=para.child[,1]*para.child[,2]/((para.child[,1]+para.child[,2])^2*(para.child[,1]+para.child[,2]+1))
#child.mean=para.child[,1]/(para.child[,1]+para.child[,2])
###############################################
cluster.stat=list()
lkhd.distance=list()
all.clust=list()
#################################################
gamma.true=matrix(nrow=2,ncol=3)
gamma.true=coff.para
max.iter=1; num.cluster=2; accu=matrix(nrow=max.iter,ncol=num.cluster)
bic=numeric();  All.Data=list()
############# main function ############################
num.iter=1
Data=list()
#############################################
moth.data=matrix(nrow=no.sub,ncol=no.site)
fath.data=matrix(nrow=no.sub,ncol=no.site)
child.data=matrix(nrow=no.sub,ncol=no.site)
#  ############  version 2: each CpG sites has its own parameter ############
for (i in 1:no.site)
{
moth.data[,i]=rbeta(no.sub, para.moth[i,1], para.moth[i,2])
fath.data[,i]=rbeta(no.sub, para.fath[i,1], para.fath[i,2])
child.data[,i]=rbeta(no.sub, para.child[i,1], para.child[i,2])
for (j in 1:no.sub)
if (child.data[j,i]==1)
child.data[j,i]= child.data[j,i]-threshold
}
Data[[1]]=moth.data
Data[[2]]=fath.data
Data[[3]]=child.data
All.Data[[num.iter]]=Data
#############################################
result=list()
cat("number of iteration=",num.iter, "\n")
##############
end.time=date()
cat("program ends at", date(),"\n\n")
time.spent<-proc.time()-ptm
#save(list=ls(),file="2000CpG4cluster81-100.RData")
moth.data[1:5,1:5]
rm(list=ls())
start.time=date()
cat("program starts at", date(),"\n\n")
ptm <- proc.time()
library(car)
library(Rsolnp)
set.seed(123)
############# Jiajing's coefficient####################
no.site=500;  no.sub=100;
no.clust=2    #  parameter settings
coff.para=matrix(nrow=no.clust, ncol=3)
coff.para[1,]=c(-4.2, 1.2, 2.5)            # choose the parameters such that the two parameters for children are not far away
coff.para[2,]=c(-2.7, 3, 2.5)
#coff.para[3,]=c(-2.3, 0, 0)
#coff.para[3,]=c(0.4, 0, 0)
#coff.para[4,]=c(1.4, -1.5, -0.6)
##########################################################
###############  version 2: each CpG site has its own parameters ##############
para.moth=matrix(nrow=no.site, ncol=2)
para.fath=matrix(nrow=no.site, ncol=2)
para.child=matrix(nrow=no.site, ncol=2)
#for (i in 1:no.site)                 # genearate  parameters for each site
#{
#  para.moth[i,]=abs(rnorm(2,5,0.5))
#  para.fath[i,]=abs(rnorm(2,7,0.5))
#  para.child[i,1]=abs(rnorm(1,10,0.5))
#}
######################### jiajing's code ##############
for (j in 1:no.site){                  # generate parameters for each site
para.moth[j,1]=abs(rnorm(1,5,0.5))
para.moth[j,2]=abs(rnorm(1,7,0.5))
para.fath[j,1]=abs(rnorm(1,5,0.5))
para.fath[j,2]=abs(rnorm(1,15,0.5))
para.child[j,1]=abs(rnorm(1,25,0.5))
}
############################################################
for (i in 1:no.site)
#for (j in 1:no.clust)
# if (i>=((j-1)*no.site/no.clust+1) & i<=(j*no.site/no.clust))
{
if (i >=1 & i<=no.site/no.clust)
j=1
if (i >=(1+no.site)/no.clust & i<=2*no.site/no.clust)
j=2
if (i >=(1+2*no.site)/no.clust & i<=3*no.site/no.clust)
j=3
if (i >=(1+3*no.site)/no.clust & i<=4*no.site/no.clust)
j=4
para.child[i,2]=(para.child[i,1]/exp(coff.para[j,1]))*(para.moth[i,2]/para.moth[i,1])^coff.para[j,2]*(para.fath[i,2]/para.fath[i,1])^coff.para[j,3]
}
#################### calculate mean & variance for mother, father and child ##################
#moth.var=para.moth[,1]*para.moth[,2]/((para.moth[,1]+para.moth[,2])^2*(para.moth[,1]+para.moth[,2]+1))
#moth.mean=para.moth[,1]/(para.moth[,1]+para.moth[,2])
#fath.var=para.fath[,1]*para.fath[,2]/((para.fath[,1]+para.fath[,2])^2*(para.fath[,1]+para.fath[,2]+1))
#fath.mean=para.fath[,1]/(para.fath[,1]+para.fath[,2])
#child.var=para.child[,1]*para.child[,2]/((para.child[,1]+para.child[,2])^2*(para.child[,1]+para.child[,2]+1))
#child.mean=para.child[,1]/(para.child[,1]+para.child[,2])
###############################################
cluster.stat=list()
lkhd.distance=list()
all.clust=list()
#################################################
gamma.true=matrix(nrow=2,ncol=3)
gamma.true=coff.para
max.iter=1; num.cluster=2; accu=matrix(nrow=max.iter,ncol=num.cluster)
bic=numeric();  All.Data=list()
############# main function ############################
num.iter=1
Data=list()
#############################################
moth.data=matrix(nrow=no.sub,ncol=no.site)
fath.data=matrix(nrow=no.sub,ncol=no.site)
child.data=matrix(nrow=no.sub,ncol=no.site)
#  ############  version 2: each CpG sites has its own parameter ############
for (i in 1:no.site)
{
moth.data[,i]=rbeta(no.sub, para.moth[i,1], para.moth[i,2])
fath.data[,i]=rbeta(no.sub, para.fath[i,1], para.fath[i,2])
child.data[,i]=rbeta(no.sub, para.child[i,1], para.child[i,2])
for (j in 1:no.sub)
if (child.data[j,i]==1)
child.data[j,i]= child.data[j,i]-threshold
}
Data[[1]]=moth.data
Data[[2]]=fath.data
Data[[3]]=child.data
All.Data[[num.iter]]=Data
#############################################
result=list()
cat("number of iteration=",num.iter, "\n")
##############
end.time=date()
cat("program ends at", date(),"\n\n")
time.spent<-proc.time()-ptm
#save(list=ls(),file="2000CpG4cluster81-100.RData")
moth.data[1:5,1:5]
fath.data[1:5,1:5]
head(para.moth)
para.moth[j,1]=abs(rnorm(1,5,0.5))
abs(rnorm(1,5,0.5))
for (j in 1:no.site){                  # generate parameters for each site
para.moth[j,1]=abs(rnorm(1,5,0.5))
para.moth[j,2]=abs(rnorm(1,7,0.5))
para.fath[j,1]=abs(rnorm(1,5,0.5))
para.fath[j,2]=abs(rnorm(1,15,0.5))
para.child[j,1]=abs(rnorm(1,25,0.5))
}
para.moth[1:5,]
for (j in 1:no.site){                  # generate parameters for each site
#para.moth[j,1]=abs(rnorm(1,5,0.5))
#para.moth[j,2]=abs(rnorm(1,7,0.5))
#para.fath[j,1]=abs(rnorm(1,5,0.5))
#para.fath[j,2]=abs(rnorm(1,15,0.5))
#para.child[j,1]=abs(rnorm(1,25,0.5))
para.moth[j,1]=5
para.moth[j,2]=7
para.fath[j,1]=5
para.fath[j,2]=15
para.child[j,1]=25
}
para.moth[1:5,]
rm(list=ls())
start.time=date()
cat("program starts at", date(),"\n\n")
ptm <- proc.time()
library(car)
library(Rsolnp)
set.seed(123)
############# Jiajing's coefficient####################
no.site=500;  no.sub=100;
no.clust=2    #  parameter settings
coff.para=matrix(nrow=no.clust, ncol=3)
coff.para[1,]=c(-4.2, 1.2, 2.5)            # choose the parameters such that the two parameters for children are not far away
coff.para[2,]=c(-2.7, 3, 2.5)
#coff.para[3,]=c(-2.3, 0, 0)
#coff.para[3,]=c(0.4, 0, 0)
#coff.para[4,]=c(1.4, -1.5, -0.6)
##########################################################
###############  version 2: each CpG site has its own parameters ##############
para.moth=matrix(nrow=no.site, ncol=2)
para.fath=matrix(nrow=no.site, ncol=2)
para.child=matrix(nrow=no.site, ncol=2)
#for (i in 1:no.site)                 # genearate  parameters for each site
#{
#  para.moth[i,]=abs(rnorm(2,5,0.5))
#  para.fath[i,]=abs(rnorm(2,7,0.5))
#  para.child[i,1]=abs(rnorm(1,10,0.5))
#}
######################### jiajing's code ##############
for (j in 1:no.site){                  # generate parameters for each site
#para.moth[j,1]=abs(rnorm(1,5,0.5))
#para.moth[j,2]=abs(rnorm(1,7,0.5))
#para.fath[j,1]=abs(rnorm(1,5,0.5))
#para.fath[j,2]=abs(rnorm(1,15,0.5))
#para.child[j,1]=abs(rnorm(1,25,0.5))
para.moth[j,1]=5
para.moth[j,2]=7
para.fath[j,1]=5
para.fath[j,2]=15
para.child[j,1]=25
}
############################################################
for (i in 1:no.site)
#for (j in 1:no.clust)
# if (i>=((j-1)*no.site/no.clust+1) & i<=(j*no.site/no.clust))
{
if (i >=1 & i<=no.site/no.clust)
j=1
if (i >=(1+no.site)/no.clust & i<=2*no.site/no.clust)
j=2
if (i >=(1+2*no.site)/no.clust & i<=3*no.site/no.clust)
j=3
if (i >=(1+3*no.site)/no.clust & i<=4*no.site/no.clust)
j=4
para.child[i,2]=(para.child[i,1]/exp(coff.para[j,1]))*(para.moth[i,2]/para.moth[i,1])^coff.para[j,2]*(para.fath[i,2]/para.fath[i,1])^coff.para[j,3]
}
#################### calculate mean & variance for mother, father and child ##################
#moth.var=para.moth[,1]*para.moth[,2]/((para.moth[,1]+para.moth[,2])^2*(para.moth[,1]+para.moth[,2]+1))
#moth.mean=para.moth[,1]/(para.moth[,1]+para.moth[,2])
#fath.var=para.fath[,1]*para.fath[,2]/((para.fath[,1]+para.fath[,2])^2*(para.fath[,1]+para.fath[,2]+1))
#fath.mean=para.fath[,1]/(para.fath[,1]+para.fath[,2])
#child.var=para.child[,1]*para.child[,2]/((para.child[,1]+para.child[,2])^2*(para.child[,1]+para.child[,2]+1))
#child.mean=para.child[,1]/(para.child[,1]+para.child[,2])
###############################################
cluster.stat=list()
lkhd.distance=list()
all.clust=list()
#################################################
gamma.true=matrix(nrow=2,ncol=3)
gamma.true=coff.para
max.iter=1; num.cluster=2; accu=matrix(nrow=max.iter,ncol=num.cluster)
bic=numeric();  All.Data=list()
############# main function ############################
num.iter=1
Data=list()
#############################################
moth.data=matrix(nrow=no.sub,ncol=no.site)
fath.data=matrix(nrow=no.sub,ncol=no.site)
child.data=matrix(nrow=no.sub,ncol=no.site)
#  ############  version 2: each CpG sites has its own parameter ############
for (i in 1:no.site)
{
moth.data[,i]=rbeta(no.sub, para.moth[i,1], para.moth[i,2])
fath.data[,i]=rbeta(no.sub, para.fath[i,1], para.fath[i,2])
child.data[,i]=rbeta(no.sub, para.child[i,1], para.child[i,2])
for (j in 1:no.sub)
if (child.data[j,i]==1)
child.data[j,i]= child.data[j,i]-threshold
}
Data[[1]]=moth.data
Data[[2]]=fath.data
Data[[3]]=child.data
All.Data[[num.iter]]=Data
#############################################
result=list()
cat("number of iteration=",num.iter, "\n")
##############
end.time=date()
cat("program ends at", date(),"\n\n")
time.spent<-proc.time()-ptm
#save(list=ls(),file="2000CpG4cluster81-100.RData")
moth.data[1:5,1:5]
fath.data[1:5,1:5]
para.moth[1:5,]
para.fath[1:5,]
para.child[1:5,]
i
rbeta(no.sub, para.moth[i,1], para.moth[i,2])
rbeta(no.sub, para.moth[1,1], para.moth[1,2])
para.moth[1,]
rbeta(no.sub, para.moth[1,1], para.moth[1,2])
rbeta(no.sub, para.moth[1,1], para.moth[1,2])
coff.para
para.child[1:5,]
dim(para.child)
para.child[490:500,]
setwd("C:\\Shengtong\\Research\\rare-var\\TestMIRAGEPackage\\mirage\\")
devtools::document()
pkgdown::build_site()
