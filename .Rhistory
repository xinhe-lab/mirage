theme_minimal(base_size = 14)+
theme(
axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
plot.title = element_text(size = 22, hjust = 0.5, face = "bold")  # Center + enlarge + bold
)
pp2
all <- grid.arrange(pp1, pp2, nrow=1)
ggsave(all,filename = paste0("C:/Shengtong/Research/rare-var/RareVariant/AJHG submisson/round1 revision/posterior_probability_comparions.png"),width = 15,height = 9,dpi = 600)
rm(list=ls())
set.seed(123)
library(knitr)
library(RSQLite)
library(dplyr)
library(knitr)
library(kableExtra)
library(RColorBrewer)
library(gplots)
library(tidyverse)
library(gridExtra)
library(ggpubr)
library(DT)
library(poolr) # use fisher method to combine p values
library("devtools")
#install.packages("Rtools")
#install_github('xinhe-lab/mirage')
library(mirage)
#############
#devtools::install_github("yaowuliu/ACAT")  # install package ACAT once
library(ACAT)
delta=0.05
SPARK_BF=read.table("C:\\Users\\hans\\OneDrive - Marquette University\\RareVariant\\100323_delta_0.05\\SPARK_combined\\mirage_result.txt", header=T)
SPARK_BF_ASC_parameters=read.csv("C:\\Users\\hans\\OneDrive - Marquette University\\RareVariant\\SPARK_BF_using_ASC_parameters.csv", header=T)
SPARK_BF_ASC_parameters=SPARK_BF_ASC_parameters %>% mutate(post.prob=BF*delta/(delta*BF+1-delta))
merged_df <- merge(SPARK_BF, SPARK_BF_ASC_parameters, by = "Gene", suffixes = c("_SPARK", "SPARK_with_ASC_parameters"))
library(ggplot2)
p3=ggplot(merged_df, aes(x = post.prob_SPARK, y = post.probSPARK_with_ASC_parameters)) +
geom_point(color = "steelblue", size = 2, alpha = 0.7) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red") +
labs(
x = "PP using parameters from SPARK dataset",
y = "PP using parameters  from ASC dataset",
title = "PP of SPARK data "
) +
theme_minimal(base_size = 14)+
theme(
axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
plot.title = element_text(size = 22, hjust = 0.5, face = "bold")  # Center + enlarge + bold
)
p3
merged_df <- merge(SPARK_BF, SPARK_BF_ASC_parameters, by = "Gene", suffixes = c("_SPARK", "SPARK_with_ASC_parameters"))
library(ggplot2)
p3=ggplot(merged_df, aes(x = post.prob_SPARK, y = post.probSPARK_with_ASC_parameters)) +
geom_point(color = "steelblue", size = 2, alpha = 0.7) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red") +
labs(
x = "PP using parameters from SPARK dataset",
y = "PP using parameters  from ASC dataset",
title = "(A) PP of SPARK data "
) +
theme_minimal(base_size = 14)+
theme(
axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
plot.title = element_text(size = 22, hjust = 0.5, face = "bold")  # Center + enlarge + bold
)
p3
ASC_BF=read.table("C:\\Users\\hans\\OneDrive - Marquette University\\RareVariant\\100323_delta_0.05\\ASC_combined\\mirage_result.txt", header=T)
ASC_BF_SPARK_parameters=read.csv("C:\\Users\\hans\\OneDrive - Marquette University\\RareVariant\\ASC_BF_using_SPARK_parameters.csv", header=T)
ASC_BF_SPARK_parameters=ASC_BF_SPARK_parameters %>% mutate(post.prob=BF*delta/(delta*BF+1-delta))
merged_df <- merge(ASC_BF, ASC_BF_SPARK_parameters, by = "Gene", suffixes = c("_ASC", "_ASC_with_SPARK_parameters"))
library(ggplot2)
ggplot(merged_df, aes(x = post.prob_ASC, y = post.prob_ASC_with_SPARK_parameters)) +
geom_point(color = "steelblue", size = 2, alpha = 0.7) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red") +
labs(
x = "PP  using parameters from ASC dataset",
y = "PP  using parameters from SPARK dataset",
title = "(B) PP of ASC data"
) +
theme_minimal(base_size = 14)+
theme(
axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
plot.title = element_text(size = 22, hjust = 0.5, face = "bold")  # Center + enlarge + bold
)
delta=0.05
entire_BF=read.table("C:\\Users\\hans\\OneDrive - Marquette University\\RareVariant\\100323_delta_0.05\\ALL_combined\\mirage_result.txt", header=T)
entire_BF_SPARK_parameters=read.csv("C:\\Users\\hans\\OneDrive - Marquette University\\RareVariant\\entire_data_BF_using_SPARK_parameters.csv", header=T)
entire_BF_SPARK_parameters=entire_BF_SPARK_parameters %>% mutate(post.prob=BF*delta/(delta*BF+1-delta))
merged_df <- merge(entire_BF, entire_BF_SPARK_parameters, by = "Gene", suffixes = c("_entire", "_entire_with_SPARK_parameters"))
library(ggplot2)
pp1=ggplot(merged_df, aes(x = post.prob_entire, y = post.prob_entire_with_SPARK_parameters)) +
geom_point(color = "steelblue", size = 2, alpha = 0.7) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red") +
labs(
x = "PP using parameters of entire dataset",
y = "PP using parameters of SPARK dataset",
title = "(C) PP of entire data"
) +
theme_minimal(base_size = 14)+
theme(
axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
plot.title = element_text(size = 22, hjust = 0.5, face = "bold")  # Center + enlarge + bold
)
pp1
entire_BF=read.table("C:\\Users\\hans\\OneDrive - Marquette University\\RareVariant\\100323_delta_0.05\\ALL_combined\\mirage_result.txt", header=T)
entire_BF_ASC_parameters=read.csv("C:\\Users\\hans\\OneDrive - Marquette University\\RareVariant\\entire_data_BF_using_ASC_parameters.csv", header=T)
entire_BF_ASC_parameters=entire_BF_ASC_parameters %>% mutate(post.prob=BF*delta/(delta*BF+1-delta))
merged_df <- merge(entire_BF, entire_BF_ASC_parameters, by = "Gene", suffixes = c("_entire", "_entire_with_ASC_parameters"))
library(ggplot2)
pp2=ggplot(merged_df, aes(x = post.prob_entire, y = post.prob_entire_with_ASC_parameters)) +
geom_point(color = "steelblue", size = 2, alpha = 0.7) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red") +
labs(
x = "PP using parameters of entire dataset",
y = "PP using parameetrs of ASC dataset",
title = "(D) PP of entire data"
) +
theme_minimal(base_size = 14)+
theme(
axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
plot.title = element_text(size = 22, hjust = 0.5, face = "bold")  # Center + enlarge + bold
)
pp2
all <- grid.arrange(p3, p4, pp1, pp2, nrow=2)
merged_df <- merge(ASC_BF, ASC_BF_SPARK_parameters, by = "Gene", suffixes = c("_ASC", "_ASC_with_SPARK_parameters"))
library(ggplot2)
p4=ggplot(merged_df, aes(x = post.prob_ASC, y = post.prob_ASC_with_SPARK_parameters)) +
geom_point(color = "steelblue", size = 2, alpha = 0.7) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red") +
labs(
x = "PP  using parameters from ASC dataset",
y = "PP  using parameters from SPARK dataset",
title = "(B) PP of ASC data"
) +
theme_minimal(base_size = 14)+
theme(
axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
plot.title = element_text(size = 22, hjust = 0.5, face = "bold")  # Center + enlarge + bold
)
p4
all <- grid.arrange(p3, p4, pp1, pp2, nrow=2)
ggsave(all,filename = paste0("C:/Shengtong/Research/rare-var/RareVariant/AJHG submisson/round1 revision/posterior_probability_comparions.png"),width = 15,height = 15,dpi = 600)
rm(list=ls())
library(rprojroot)
library(ggplot2)
root <- rprojroot::find_rstudio_root_file()
data_raw=multiplesheets((file.path(root, "..\\data_for_reliability.xlsx")))
library(readxl)
data_raw=read_excel((file.path(root, "..\\data_for_reliability.xlsx")))
data_raw
head(data_raw)
head(data_raw)
library(dplyr)
library(tidyr)
library(irr)
# List of variables to calculate inter-rater reliability for
variables <- c("M_HOMECARE?", "M_DIABETES?", "M_PERIO_RISK_ASSESS_6WEEKS?", "M_DQM_7_NUM")
# Initialize a list to store results
kappa_results <- list()
# Loop through each variable
for (var in variables) {
# Reshape data to wide format (each rater gets a column)
data_wide <- data_raw %>%
select(ID, all_of(var), rater) %>%
pivot_wider(names_from = rater, values_from = all_of(var))
# Calculate Cohen's Kappa (exclude ID column)
kappa_results[[var]] <- kappa2(data_wide[, -1])
}
# Print results
kappa_results
data_raw$`M_DIABETES?`
data_raw$`M_DIABETES?`[1:25]
data_raw$`M_DIABETES?`[26:50]
kappa_results
class(kappa_results)
names(kappa_results[[1]])
library(dplyr)
library(tidyr)
library(irr)
# Variables of interest
variables <- c("M_HOMECARE?", "M_DIABETES?", "M_PERIO_RISK_ASSESS_6WEEKS?", "M_DQM_7_NUM")
# Create results data frame
kappa_summary <- data.frame(
variable = character(),
kappa_value = numeric(),
p_value = numeric(),
stringsAsFactors = FALSE
)
for (var in variables) {
# Reshape to wide format
data_wide <- data_raw %>%
select(ID, all_of(var), rater) %>%
pivot_wider(names_from = rater, values_from = all_of(var))
# Compute Cohen's Kappa
kappa_res <- kappa2(data_wide[, -1])
# Extract Kappa value and p-value
kappa_summary <- rbind(kappa_summary, data.frame(
variable = var,
kappa_value = kappa_res$value,
p_value = kappa_res$p.value
))
}
library(dplyr)
library(tidyr)
library(irr)
# Variables of interest
variables <- c("M_HOMECARE?", "M_DIABETES?", "M_PERIO_RISK_ASSESS_6WEEKS?", "M_DQM_7_NUM")
# Create results data frame
kappa_summary <- data.frame(
variable = character(),
kappa_value = numeric(),
p_value = numeric(),
stringsAsFactors = FALSE
)
for (var in variables) {
# Reshape to wide format
data_wide <- data_raw %>%
select(ID, all_of(var), rater) %>%
pivot_wider(names_from = rater, values_from = all_of(var))
# Compute Cohen's Kappa
kappa_res <- kappa2(data_wide[, -1])
# Extract Kappa value and p-value
kappa_summary <- rbind(kappa_summary, data.frame(
variable = var,
kappa_value = kappa_res$value,
p_value = kappa_res$p.value
))
}
kappa_summary %>%
datatable(extensions = 'Buttons',
caption = "",
options = list(dom = 'Blfrtip',
buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),
lengthMenu = list(c(10,25,50,-1),
c(10,25,50,"All"))))
library(DT)
library(dplyr)
library(tidyr)
library(irr)
# Variables of interest
variables <- c("M_HOMECARE?", "M_DIABETES?", "M_PERIO_RISK_ASSESS_6WEEKS?", "M_DQM_7_NUM")
# Create results data frame
kappa_summary <- data.frame(
variable = character(),
kappa_value = numeric(),
p_value = numeric(),
stringsAsFactors = FALSE
)
for (var in variables) {
# Reshape to wide format
data_wide <- data_raw %>%
select(ID, all_of(var), rater) %>%
pivot_wider(names_from = rater, values_from = all_of(var))
# Compute Cohen's Kappa
kappa_res <- kappa2(data_wide[, -1])
# Extract Kappa value and p-value
kappa_summary <- rbind(kappa_summary, data.frame(
variable = var,
kappa_value = kappa_res$value,
p_value = kappa_res$p.value
))
}
kappa_summary %>%
datatable(extensions = 'Buttons',
caption = "",
options = list(dom = 'Blfrtip',
buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),
lengthMenu = list(c(10,25,50,-1),
c(10,25,50,"All"))))
(kappa_res$p.value
)
ifelse(kappa_res$p.value<0.001, "<0.001")
ifelse(kappa_res$p.value<0.001, "<0.001", kappa_res$p.value)
library(dplyr)
library(tidyr)
library(irr)
# Variables of interest
variables <- c("M_HOMECARE?", "M_DIABETES?", "M_PERIO_RISK_ASSESS_6WEEKS?", "M_DQM_7_NUM")
# Create results data frame
kappa_summary <- data.frame(
variable = character(),
kappa_value = numeric(),
p_value = numeric(),
stringsAsFactors = FALSE
)
for (var in variables) {
# Reshape to wide format
data_wide <- data_raw %>%
select(ID, all_of(var), rater) %>%
pivot_wider(names_from = rater, values_from = all_of(var))
# Compute Cohen's Kappa
kappa_res <- kappa2(data_wide[, -1])
# Extract Kappa value and p-value
kappa_summary <- rbind(kappa_summary, data.frame(
variable = var,
kappa_value = round(kappa_res$value,4),
p_value = ifelse(kappa_res$p.value<0.0001, "<0.0001")
))
}
library(dplyr)
library(tidyr)
library(irr)
# Variables of interest
variables <- c("M_HOMECARE?", "M_DIABETES?", "M_PERIO_RISK_ASSESS_6WEEKS?", "M_DQM_7_NUM")
# Create results data frame
kappa_summary <- data.frame(
variable = character(),
kappa_value = numeric(),
p_value = numeric(),
stringsAsFactors = FALSE
)
for (var in variables) {
# Reshape to wide format
data_wide <- data_raw %>%
select(ID, all_of(var), rater) %>%
pivot_wider(names_from = rater, values_from = all_of(var))
# Compute Cohen's Kappa
kappa_res <- kappa2(data_wide[, -1])
# Extract Kappa value and p-value
kappa_summary <- rbind(kappa_summary, data.frame(
variable = var,
kappa_value = round(kappa_res$value,4),
p_value = ifelse(kappa_res$p.value<0.0001, "<0.0001", kappa_res$p.value)
))
}
kappa_summary %>%
datatable(extensions = 'Buttons',
caption = "",
options = list(dom = 'Blfrtip',
buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),
lengthMenu = list(c(10,25,50,-1),
c(10,25,50,"All"))))
library(dplyr)
library(tidyr)
library(irr)
# Variables of interest
variables <- c("M_HOMECARE?", "M_DIABETES?", "M_PERIO_RISK_ASSESS_6WEEKS?", "M_DQM_7_NUM")
# Create results data frame
kappa_summary <- data.frame(
variable = character(),
kappa_value = numeric(),
p_value = numeric(),
stringsAsFactors = FALSE
)
for (var in variables) {
# Reshape to wide format
data_wide <- data_raw %>%
select(ID, all_of(var), rater) %>%
pivot_wider(names_from = rater, values_from = all_of(var))
# Compute Cohen's Kappa
kappa_res <- kappa2(data_wide[, -1])
# Extract Kappa value and p-value
kappa_summary <- rbind(kappa_summary, data.frame(
variable = var,
kappa_value = round(kappa_res$value,4),
p_value = ifelse(kappa_res$p.value<0.0001, "<0.0001", round(kappa_res$p.value, 4))
))
}
kappa_summary %>%
datatable(extensions = 'Buttons',
caption = "",
options = list(dom = 'Blfrtip',
buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),
lengthMenu = list(c(10,25,50,-1),
c(10,25,50,"All"))))
rm(list=ls())
set.seed(123)
library(knitr)
library(RSQLite)
library(dplyr)
library(knitr)
library(kableExtra)
library(RColorBrewer)
library(gplots)
library(tidyverse)
library(gridExtra)
library(ggpubr)
library(DT)
library(poolr) # use fisher method to combine p values
library("devtools")
#install.packages("Rtools")
#install_github('xinhe-lab/mirage')
library(mirage)
#############
#devtools::install_github("yaowuliu/ACAT")  # install package ACAT once
library(ACAT)
########## use fixed parameter estimate to calculate BF, this is very useful because it doesn't need to re-run analysis to BF of every gene which takes a long time and large space to store that information
intergrand=function(aa, var.case, var.contr, bar.gamma, sig, N1, N0)
{
ff=dbinom(var.case, sum(var.case, var.contr), aa*N1/(aa*N1+N0))*dgamma(aa, bar.gamma*sig, sig)
return(ff)
}
# calculate the bayes factor of a single variant via integration
BF.var.inte=function(var.case, var.contr, bar.gamma, sig, N1, N0)
{
marglik0.CC <- dbinom(var.case, sum(var.case, var.contr), N1/(N1+N0))    # Under H0: gamma=1
marglik1.CC <- integrate(intergrand, var.case, var.contr, bar.gamma, sig, N1, N0, low=0, upper=100, stop.on.error=F)$value # Under H1: gamma~gamma(gamma.mean*sigma, sigma)
BF.var <- marglik1.CC/marglik0.CC
return(BF.var)
}
fixed.beta.func=function(new.data, N1, N0, gamma.mean, sigma, beta) # new.data has one column specifying its group index
{
#######################
beta.k=beta
full.info.genevar=list()
gene.list=new.data$Gene; unique.gene=unique(gene.list) # find the gene list
num.gene=length(unique.gene)
BF.gene=numeric()
########################
for (i in 1:num.gene)
{
#    cat(i, "th gene of ", "\t", num.gene, "\t", "is running", "\n")
var.index.list=which(gene.list==unique.gene[i])
indi.gene=new.data[var.index.list,]   # note var.index.list matches new.data
bb=1; var.BF=numeric()
if (length(var.index.list)>0) # calculate Bayes factor for variant (i,j)
for (j in 1:length(var.index.list))
{
if (new.data$group.index[var.index.list[j]]<=3)   # note here bar.gamma is group specific, attention what bar.gamma goes to which group
var.BF[j]=BF.var.inte(new.data$No.case[var.index.list[j]], new.data$No.contr[var.index.list[j]], bar.gamma=6, sig=sigma, N1, N0)
if (new.data$group.index[var.index.list[j]]>3)
var.BF[j]=BF.var.inte(new.data$No.case[var.index.list[j]], new.data$No.contr[var.index.list[j]], bar.gamma=3, sig=sigma, N1, N0)
bb=bb*((1-beta.k[new.data$group.index[var.index.list[j]]])+beta.k[new.data$group.index[var.index.list[j]]]*var.BF[j])
}
full.info.genevar[[i]]=cbind(indi.gene, var.BF)
BF.gene[i]=bb
}
return(result=list(BayesFactor=data.frame(Gene=unique.gene, BF=BF.gene), full.info=full.info.genevar))
}
rm(list=ls())
library(rprojroot)
library(ggplot2)
library(readxl)
library(DT)
root <- rprojroot::find_rstudio_root_file()
data_raw=read_excel((file.path(root, "..\\data_for_reliability.xlsx")))
library(dplyr)
library(tidyr)
library(irr)
# Variables of interest
variables <- c("M_HOMECARE?", "M_DIABETES?", "M_PERIO_RISK_ASSESS_6WEEKS?", "M_DQM_7_NUM")
# Create results data frame
kappa_summary <- data.frame(
variable = character(),
kappa_value = numeric(),
p_value = numeric(),
stringsAsFactors = FALSE
)
for (var in variables) {
# Reshape to wide format
data_wide <- data_raw %>%
select(ID, all_of(var), rater) %>%
pivot_wider(names_from = rater, values_from = all_of(var))
# Compute Cohen's Kappa
kappa_res <- kappa2(data_wide[, -1], weight = T)
# Extract Kappa value and p-value
kappa_summary <- rbind(kappa_summary, data.frame(
variable = var,
kappa_value = round(kappa_res$value,4),
p_value = ifelse(kappa_res$p.value<0.0001, "<0.0001", round(kappa_res$p.value, 4))
))
}
kappa_summary %>%
datatable(extensions = 'Buttons',
caption = "",
options = list(dom = 'Blfrtip',
buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),
lengthMenu = list(c(10,25,50,-1),
c(10,25,50,"All"))))
data_wide
library(dplyr)
library(tidyr)
library(irr)
# Variables of interest
variables <- c("M_HOMECARE?", "M_DIABETES?", "M_PERIO_RISK_ASSESS_6WEEKS?", "M_DQM_7_NUM")
# Create results data frame
kappa_summary <- data.frame(
variable = character(),
kappa_value = numeric(),
p_value = numeric(),
stringsAsFactors = FALSE
)
for (var in variables) {
# Reshape to wide format
data_wide <- data_raw %>%
select(ID, all_of(var), rater) %>%
pivot_wider(names_from = rater, values_from = all_of(var))
# Compute Cohen's Kappa
kappa_res <- kappa2(data_wide[, -1])
# Extract Kappa value and p-value
kappa_summary <- rbind(kappa_summary, data.frame(
variable = var,
kappa_value = round(kappa_res$value,4),
p_value = ifelse(kappa_res$p.value<0.0001, "<0.0001", round(kappa_res$p.value, 4))
))
}
kappa_summary %>%
datatable(extensions = 'Buttons',
caption = "",
options = list(dom = 'Blfrtip',
buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),
lengthMenu = list(c(10,25,50,-1),
c(10,25,50,"All"))))
setwd("C:\\Shengtong\\Research\\rare-var\\TestMIRAGEPackage\\mirage\\mirage\\")
devtools::document()
pkgdown::build_site()
